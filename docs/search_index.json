[["index.html", "Visualization and analysis of probability distributions of large temporal data Welcome", " Visualization and analysis of probability distributions of large temporal data Sayani Gupta Welcome This is the website for my PhD thesis at Monash University (Australia), titled “Visualization and analysis of probability distributions of large temporal data.” 2021-11-14 "],["ch-abstract.html", "Abstract", " Abstract The research was motivated by the desire to understand some Australian smart meter data, which was collected half-hourly for two years at the household level. With temporal data available at ever finer scales, exploring periodicity can become overwhelming with so many possible temporal deconstructions to explore. Analysts are expected to comprehensively explore the many ways to view and consider temporal data. However, the plethora of choices and the lack of a systematic approach to do so quickly can make the task daunting. This work investigates how time may be dissected, resulting in alternative data segmentation and, as a result, different visualizations that can aid in the identification of underlying patterns. The first contribution (Chapter 2) describes classes of time deconstructions using linear and cyclic time granularities. It provides tools to compute possible cyclic granularities from an ordered (usually temporal) index and also a framework to systematically explore the distribution of a univariate variable conditional on two cyclic time granularities by defining “harmony.” A “harmony” denotes pairs of granularities that could be effectively analyzed together and reduces the search from all possible options. This approach is still overwhelming for human consumption due of the vast number of harmonies remaining. The second contribution (Chapter 3) refines the search for informative granularities by identifying those for which the differences between the displayed distributions are greatest and also rating them in order of importance of capturing maximum variation. The third contribution (Chapter 4) builds upon the first two to provide methods for exploring heterogeneities in repetitive behavior for many time series and over multiple granularities. It accomplishes this by providing a way to cluster time series based on probability distributions across informative cyclic granularities. Although we were motivated by the smart meter example, the problem and the solutions we propose are practically relevant to any temporal data observed more than once per year. 2021-11-14 –&gt; "],["ch-thanks.html", "Acknowledgements", " Acknowledgements I am deeply grateful to my supervisors Rob J Hyndman and Dianne Cook, who are phenomenal leaders in their respective fields and lead by example. I am inspired by their creativity, wisdom, discipline, and dedication to contribute to the society through their research. Thank you for constantly pushing me to improve as a programmer and researcher and regularly sharing good practices for conducting research. Looking back, I am grateful for how my thoughts and work in statistical computing, graphics, and data analytics, in general, have evolved over the years. I still have a lot to learn, but I am a much more self-reliant and independent researcher than when I started. Di has been instrumental in exposing me to the potential benefits of effective data visualization. As a female researcher, I am encouraged by her willingness to pursue unconventional avenues and have frequently noticed her make conscious and proactive choices to question existing stereotypes and biases. Thank you, Di, for being a fantastic female role model. I would also like to express my gratitude to my supervisor Dr. Peter Toscas of Data61 CSIRO, for always being available to help with technical issues and offering feedback on practical elements of analyzing smart meter data at our monthly meetings. I want to thank the Department of Econometrics and Business Statistics, Monash Business School, ARC Centre of Excellence for Mathematical and Statistical Frontiers (ACEMS), and Data61 CSIRO for their financial support. Thanks to the Department, I attended a few conferences in person (before COVID hit) and had a great time networking and being inspired by many people. A few highlights are UseR! 2018 (Brisbane), Young Statistician’s Conference 2019 (Canberra), WOMBAT 2019 (Melbourne), and ROpenSci 2019 (Sydney). Thank you to Gael Martin, Farshid Wahid, Klaus Ackermann, and Didier Nibbering from my PhD committee for providing such a supportive environment. Thank you, Stephanie Kobakian and Nicholas Tierney, for being so warm, kind and welcoming when I began my PhD. Being a part of such an inclusive environment meant a lot to me as an international student. Thank you, Nicholas Spyrison and Mitchell O’Hara-Wild, for the numerous informative discussions, brainstorming sessions, as well as for generously sharing your expertise and experience in software development. Thank you to each of you, NUMBATs, and the broader R community for directly and indirectly helping me countless times. You never fail to inspire me. PhD in Covid has been hard, and I would not have been able to make it through this if not for the emotional support of my friends and family. Thank you Puwasala, Sium, and Ian, for being so kind and acting as a pillar of emotional support, especially during the last leg of my journey. Thank you Tushar, Samarpita and Nairita for always motivating me and believing in me when I did not believe in myself. Thank you to each one of you for being available, listening to me, and putting things in perspective when I lost sight. Thanks to my housemates Anjali, Surbhi, and Dulaji for the fun company and conversations that kept me sane in the COVID lockdowns. Finally, a big thank you to my family for always being supportive of my choices. Thanks to my mum (Nupur Gupta) and dad (Arun Prasad Gupta), from whom I learnt that no matter where you start from, if you persevere and are sincere in your efforts, you can sail through any difficult situation. They are my constant cheerleaders for all little and big endeavors. Thanks to my brother (Avijit) for always having my back and inspiring me to dream bigger. Thank you, Juhi (sister-in-law), for reminding me of the value of organization in all aspects of life and the importance of prioritizing my physical health from time to time. Thank you all for your part in supporting me in this journey. I love you. "],["ch-preface.html", "Preface", " Preface Chapter 2 has been accepted by the Journal of Computational and Graphical Statistics. It has won the ACEMS Business Analytics Prize in 2020. The accompanying R package gravitas is on CRAN. Chapter 3 and Chapter 4 are yet to be submitted. Open and reproducible research This thesis is written in R Markdown (Xie, Allaire, and Grolemund 2018) with bookdown (Xie 2016), using renv (Ushey 2019) to create reproducible environments. The online version of this thesis is hosted at https://sayani07.github.io/thesis-sg. All materials (including the data sets and source files) required to reproduce this document can be found at the Github repository https://github.com/Sayani07/thesis-SG. License This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. The code used in this document is available under the MIT license. "],["1-ch-intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction The Smart Grid, Smart City (SGSC) project (2010–2014) available through the Department of the Environment and Energy provides half-hourly data of over 13,000 Australian electricity smart meter customers distributed unevenly from October 2011 to March 2014. Large data sets like this include significant uncertainty regarding customer behavior due to a wide variety of customers. Behavioral patterns vary significantly due to differences in size, location, and amenities such as solar panels, central heating, and air conditioning. For example, some families use a dryer, while others hang their clothes to dry. This could be reflected in their weekly profile. They may vary on a monthly basis, with some customers using more air conditioners or heaters than others despite having comparable electrical equipment and weather conditions. Some customers are night owls, while others are morning larks, which may show up in their daily profile. Customers’ day-off energy consumption varies depending on whether they stay at home or go outside. With the availability of data at finer and finer time scales, exploration of time series data may be required to be carried out across both finer and coarser scales to draw useful inferences about the underlying process. To reduce the complexity of time, it is typical to divide it into years, months, weeks, days, and so on in a hierarchical manner (Aigner et al. 2011). These discrete abstractions of time are known as time granularities. Linear time granularities (Bettini et al. 1998) ,such as hours, days, weeks and months, respect the linear progression of time and are non-repeating. Cyclic temporal granularities representing cyclical repetitions in time (such as hour-of-the-day, work-day/weekend) are effective for analyzing repetitive patterns in time series data. To acquire a comprehensive view of the repeated patterns, it is necessary to navigate through all of the conceivable cyclic granularities. This approach is consistent with the concept of EDA (Tukey 1977), which stresses the utilization of multiple perspectives on data to assist with formulating hypotheses before proceeding to hypothesis testing. This, however, is a challenging process since it throws up a myriad of alternatives. Furthermore, the transition from linear to cyclic granularities results in restructured data, with each level of the temporal deconstruction corresponding to multiple values of the observed variable. This motivates the research presented in this thesis, which aims to provide a platform for systematically exploring probability distributions induced by these multiple observations to support the discovery of regular patterns or anomalies, as well as the exploration of clusters of behaviors or the summarization of the behavior. "],["1.1-sec:gravitas.html", "1.1 Visualizing probability distributions across bivariate cyclic temporal granularities", " 1.1 Visualizing probability distributions across bivariate cyclic temporal granularities Chapter 2 describes classes of time deconstructions using linear and cyclic time granularities, which can be used to create data visualizations to explore periodicities, associations, and anomalies. It provides a formal characterization of cyclic granularities and facilitates manipulation of single- and multiple-order-up time granularities through cyclic calendar algebra, as well as providing a recommendation algorithm to check the feasibility of creating plots for any two cyclic granularities. Our proposed method is also applicable to non-temporal hierarchical granularities with an underlying ordered index. The methods are implemented in the open-source R package gravitas and are consistent with a tidy workflow (Wickham and Grolemund 2016), with probability distributions examined using the range of graphics available in ggplot2(Wickham 2016). "],["1.2-sec:hakear.html", "1.2 Detecting distributional differences between temporal granularities for exploratory time series analysis", " 1.2 Detecting distributional differences between temporal granularities for exploratory time series analysis Chapter 3 is a natural extension of Chapter 2. Many, many displays might be built using cyclic granularities. However, only a handful of them may be interesting, revealing major patterns. Determining which displays exhibit “significant” distributional differences between cyclic granularity categories and plotting only these would allow for more efficient exploration. Furthermore, a few of the displays in this collection will be more engaging than others. Chapter 3 provides a new distance metric for selecting and ranking the multiple granularities. The statistical significance of potential visual discoveries is aided by selecting a threshold for the proposed numerical distance measure. The distance measure is computed for a single or pairs of cyclic granularities, and it can be compared across different cyclic granularities as well as a collection of time series. This chapter also includes a case study using residential smart meter data from Melbourne to demonstrate how the suggested methodology may be utilized to automatically find temporal granularities with significant distributional differences. The methods are implemented in the open-source R package hakear. "],["1.3-sec:gracsr.html", "1.3 Clustering time series based on probability distributions across temporal granularities", " 1.3 Clustering time series based on probability distributions across temporal granularities In Chapter 4, we look at the problem of using clustering to discover patterns in a large number of univariate time series across multiple temporal granularities. Time series clustering research is gaining traction as more data is collected at finer temporal resolution, over longer time periods, and for a larger number of individuals/entities. Many disciplines have noisy, patchy, uneven, and asynchronous time series that make it difficult to search for similarities. We propose a method for overcoming these constraints by calculating distances between time series based on probability distributions at various temporal granularities. Because they are based on probability distributions, these distances are resistant to missing or noisy data and aid in dimension reduction. When fed into a clustering algorithm, the distances can be used to divide large data sets into small pockets of similar repetitive behavior. These subgroups can then be analyzed separately or used as distinct prototype behaviors in classification problems. The proposed method was tested on a group of residential electricity consumers from the Australian smart meter data set to show that it can generate meaningful clusters. This chapter includes a brief review of the literature on traditional time series clustering and, more specifically, clustering residential smart meter data. "],["1.4-thesis-structure.html", "1.4 Thesis structure", " 1.4 Thesis structure The thesis is structured as follows. Chapter 2 provides details of the cyclic granularities, different classes, and computation, and also its usage in exploratory time series analysis through applications. This is implemented in the R package gravitas. Chapter 3 provides guidance on how to choose significant cyclic granularities, which are likely to have interesting patterns across its categories. This is available as the R package hakear. Chapter 4 provides methods to explore heterogeneity in repetitive behavior for multiple time series over multiple cyclic granularities. This is in the developing R package gracsr. Chapter 5 summarizes the software tools developed for the work, and discusses some future plans. "],["2-ch-gravitas.html", "Chapter 2 Visualizing probability distributions across bivariate cyclic temporal granularities", " Chapter 2 Visualizing probability distributions across bivariate cyclic temporal granularities Deconstructing a time index into time granularities can assist in exploration and automated analysis of large temporal data sets. This paper describes classes of time deconstructions using linear and cyclic time granularities. Linear granularities respect the linear progression of time such as hours, days, weeks and months. Cyclic granularities can be circular such as hour-of-the-day, quasi-circular such as day-of-the-month, and aperiodic such as public holidays. The hierarchical structure of granularities creates a nested ordering: hour-of-the-day and second-of-the-minute are single-order-up. Hour-of-the-week is multiple-order-up, because it passes over day-of-the-week. Methods are provided for creating all possible granularities for a time index. A recommendation algorithm provides an indication whether a pair of granularities can be meaningfully examined together (a “harmony”), or when they cannot (a “clash”). Time granularities can be used to create data visualizations to explore for periodicities, associations and anomalies. The granularities form categorical variables (ordered or unordered) which induce groupings of the observations. Assuming a numeric response variable, the resulting graphics are then displays of distributions compared across combinations of categorical variables. The methods implemented in the open source R package gravitas are consistent with a tidy workflow, with probability distributions examined using the range of graphics available in ggplot2. "],["2.1-introduction.html", "2.1 Introduction", " 2.1 Introduction Temporal data are available at various resolutions depending on the context. Social and economic data are often collected and reported at coarse temporal scales such as monthly, quarterly or annually. With recent advancements in technology, more and more data are recorded at much finer temporal scales. Energy consumption may be collected every half an hour, energy supply may be collected every minute, and web search data might be recorded every second. As the frequency of data increases, the number of questions about the periodicity of the observed variable also increases. For example, data collected at an hourly scale can be analyzed using coarser temporal scales such as days, months or quarters. This approach requires deconstructing time in various possible ways called time granularities (Aigner et al. 2011). It is important to be able to navigate through all of these time granularities to have multiple perspectives on the periodicity of the observed data. This aligns with the notion of exploratory data analysis (EDA) (Tukey 1977) which emphasizes the use of multiple perspectives on data to help formulate hypotheses before proceeding to hypothesis testing. Visualizing probability distributions conditional on one or more granularities is an indispensable tool for exploration. Analysts are expected to comprehensively explore the many ways to view and consider temporal data. However, the plethora of choices and the lack of a systematic approach to do so quickly can make the task overwhelming. Calendar-based graphics (Wang, Cook, and Hyndman 2020b) are useful in visualizing patterns in the weekly and monthly structure and are helpful when checking for the effects of weekends or special days. Any temporal data at sub-daily resolution can also be displayed using this type of faceting (Wickham 2016) with days of the week, month of the year, or another sub-daily deconstruction of time. But calendar effects are not restricted to conventional day-of-week or month-of-year deconstructions. There can be many different time deconstructions, based on the calendar or on categorizations of time granularities. Linear time granularities (such as hours, days, weeks and months) respect the linear progression of time and are non-repeating. One of the first attempts to characterize these granularities is due to Bettini et al. (1998). However, the definitions and rules defined are inadequate for describing non-linear granularities. Hence, there is a need to define some new time granularities, that can be useful in visualizations. Cyclic time granularities can be circular, quasi-circular or aperiodic. Examples of circular granularities are hour of the day and day of the week; an example of a quasi-circular granularity is day of the month; examples of aperiodic granularities are public holidays and school holidays. Time deconstructions can also be based on the hierarchical structure of time. For example, hours are nested within days, days within weeks, weeks within months, and so on. Hence, it is possible to construct single-order-up granularities such as second of the minute, or multiple-order-up granularities such as second of the hour. The lubridate package (Grolemund and Wickham 2011) provides tools to access and manipulate common date-time objects. However, most of its accessor functions are limited to single-order-up granularities. The motivation for this work stems from the desire to provide methods to better understand large quantities of measurements on energy usage reported by smart meters in households across Australia, and indeed many parts of the world. Smart meters currently provide half-hourly use in kWh for each household, from the time they were installed, some as early as 2012. Households are distributed geographically and have different demographic properties as well as physical properties such as the existence of solar panels, central heating or air conditioning. The behavioral patterns in households vary substantially; for example, some families use a dryer for their clothes while others hang them on a line, and some households might consist of night owls, while others are morning larks. It is common to see aggregates (see Goodwin and Dykes 2012) of usage across households, such as half-hourly total usage by state, because energy companies need to plan for maximum loads on the network. But studying overall energy use hides the distribution of usage at finer scales, and makes it more difficult to find solutions to improve energy efficiency. We propose that the analysis of smart meter data will benefit from systematically exploring energy consumption by visualizing the probability distributions across different deconstructions of time to find regular patterns and anomalies. Although we were motivated by the smart meter example, the problem and the solutions we propose are practically relevant to any temporal data observed more than once per year. In a broader sense, it could be even suitable for data observed by years, decades, and centuries as might be in weather or astronomical data. This work provides tools for systematically exploring bivariate granularities within the tidy workflow (Wickham and Grolemund (2016)). In particular, we provide a formal characterization of cyclic granularities; facilitate manipulation of single- and multiple-order-up time granularities through cyclic calendar algebra; develop an approach to check the feasibility of creating plots or drawing inferences for any two cyclic granularities. The remainder of the paper is organized as follows: Section  provides some background material on linear granularities and calendar algebra for computing different linear granularities. Section  formally characterizes different cyclic time granularities by extending the framework of linear time granularities, and introducing cyclic calendar algebra for computing cyclic time granularities. The data structure for exploring the conditional distributions of the associated time series across pairs of cyclic time granularities is discussed in Section . Section  discusses the role of different factors in constructing an informative and trustworthy visualization. Section  examines how systematic exploration can be carried out for a temporal and non-temporal application. Finally, we summarize our results and discuss possible future directions in Section . "],["2.2-sec:linear-time.html", "2.2 Linear time granularities", " 2.2 Linear time granularities Discrete abstractions of time such as weeks, months or holidays can be thought of as “time granularities.” Time granularities are linear if they respect the linear progression of time. There have been several attempts to provide a framework for formally characterizing time granularities, including Bettini et al. (1998) which forms the basis of the work described here. 2.2.1 Definitions The time domain is assumed to be discrete, and there is unique predecessor and successor for every element in the time domain except for the first and last. This implies that the granules in a linear granularity are non-overlapping, continuous and ordered. The indexing for each granule can also be associated with a textual representation, called the label. A discrete time model often uses a fixed smallest linear granularity named by Bettini et al. (1998) bottom granularity. illustrates some common linear time granularities. Here, “hour” is the bottom granularity and “day,” “week,” “month” and “year” are linear granularities formed by mapping the index set to subsets of the hourly time domain. If we have “hour” running from \\(\\{0, 1, \\dots,t\\}\\), we will have “day” running from \\(\\{0, 1, \\dots, \\lfloor t/24\\rfloor\\}\\). These linear granularities are uni-directional and non-repeating. Figure 2.1: Illustration of time domain, linear granularities and index set. Hour, day, week, month and year are linear granularities and can also be considered to be time domains. These are ordered with ordering guided by integers and hence is unidirectional and non-repeating. Hours could also be considered the index set, and a bottom granularity. 2.2.2 Relativities Properties of pairs of granularities fall into various categories. For example, both \\(day \\trianglelefteq week\\) and \\(day \\preceq week\\) hold, since every granule of \\(week\\) is the union of some set of granules of day and each day is a subset of a \\(week\\). These definitions are not equivalent. Consider another example, where \\(G_1\\) denotes “weekend” and \\(H_1\\) denotes “week.” Then, \\(G_1 \\preceq H_1\\), but \\(G_1 \\ntrianglelefteq H_1\\). Further, with \\(G_2\\) denoting “days” and \\(H_2\\) denoting “business-week,” \\(G_2 \\npreceq H_2\\), but \\(G_2 \\trianglelefteq H_2\\), since each business-week can be expressed as an union of some days, but Saturdays and Sundays are not subset of any business-week. Moreover, with \\(H_3\\) denoting “public holidays,” \\(G_1 \\npreceq H_3\\) and \\(G_1 \\ntrianglelefteq H_3\\). If \\(G\\) groups into \\(H\\), it would imply that any granule \\(H(i)\\) is the union of some granules of \\(G\\), for example, \\(G(a_1), G(a_2), \\dots, G(a_k)\\). Condition (2) in Definition implies that if \\(H(i + R) \\neq \\emptyset\\), then \\(H(i + R) = \\bigcup (G(a_1 + P), G(a_2 + P), \\dots, G(a_k + P))\\), resulting in a “periodic” pattern of the composition of \\(H\\) using granules of \\(G\\). In this pattern, each granule of \\(H\\) is shifted by \\(P\\) granules of \\(G\\). \\(P\\) is called the (Bettini, Jajodia, and Wang (2000)). For example, day is periodic with respect to week with \\(R=1\\) and \\(P=7\\), while (if we ignore leap years) day is periodic with respect to month with \\(R=12\\) and \\(P=365\\) as any month would consist of the same number of days across years. Since the idea of period involves a pair of granularities, we say that the pair \\((day, week)\\) has period 7, while the pair \\((day, month)\\) has a period 365 (ignoring leap years). Granularities can also be periodic with respect to other granularities, “except for a finite number of spans of time where they behave in an anomalous way”; these are called quasi-periodic relationships (Bettini and De Sibi 2000). In a Gregorian calendar with leap years, day groups quasi-periodically into month with the exceptions of the time domain corresponding to \\(29^{\\text{th}}\\) February of any year. With two linear granularities \\(G\\) and \\(H\\), if \\(G\\) groups into or finer than \\(H\\) then \\(G\\) is of lower order than \\(H\\). For example, if the bottom granularity is hour, then granularity \\(day\\) will have lower order than \\(week\\) since each day consist of fewer hours than each week. Granules in any granularity may be aggregated to form a coarser granularity. A system of multiple granularities in lattice structures is referred to as a calendar by Dyreson et al. (2000). Linear time granularities are computed through “calendar algebra” operations (Ning, Wang, and Jajodia 2002) designed to generate new granularities recursively from the bottom granularity. For example, due to the constant length of day and week, we can derive them from hour using \\[ D(j) = \\lfloor H(i)/24\\rfloor, \\qquad W(k) = \\lfloor H(i)/(24*7)\\rfloor, \\] where \\(H\\), \\(D\\) and \\(W\\) denote hours, days and weeks respectively. "],["2.3-sec:cyclic-gran.html", "2.3 Cyclic time granularities", " 2.3 Cyclic time granularities Cyclic granularities represent cyclical repetitions in time. They can be thought of as additional categorizations of time that are not linear. Cyclic granularities can be constructed from two linear granularities, that relate periodically; the resulting cycles can be either regular (circular), or irregular (quasi-circular). 2.3.1 Circular granularities Figure 2.2: Index sets for some linear and circular granularities (a). Circular granularities can be constructed by slicing the linear granularity into pieces and stacking them (b). illustrates some linear and cyclical granularities. Cyclical granularities are constructed by cutting the linear granularity into pieces, and stacking them to match the cycles (as shown in b). \\(B, G, H\\) (day, week, fortnight, respectively) are linear granularities. The circular granularity \\(C_{B, G}\\) (day-of-week) is constructed from \\(B\\) and \\(G\\), while circular granularity \\(C_{B, H}\\) (day-of-fortnight) is constructed from \\(B\\) and \\(H\\). These overlapping cyclical granularities share elements from the linear granularity. Each of \\(C_{B , G}\\) and \\(C_{B , H}\\) consist of repeated patterns \\(\\{0, 1, \\dots, 6\\}\\) and \\(\\{0, 1, \\dots, 13\\}\\) with \\(P=7\\) and \\(P=14\\) respectively. Suppose \\({L}\\) is a label mapping that defines a unique label for each index \\(\\ell \\in \\{ 0,1,\\dots, (P-1)\\}\\). For example, the label mapping \\(L\\) for \\(C_{B, G}\\) can be defined as \\[ L: \\{0,1, \\dots, 6\\} \\longmapsto\\ \\{\\text{Sunday}, \\text{Monday}, \\dots, \\text{Saturday}\\}. \\] In general, any circular granularity relating two linear granularities can be expressed as \\[ C_{G, H}(z) = \\lfloor z/P(B,G) \\rfloor\\mod P(G,H), \\] where \\(H\\) is periodic with respect to \\(G\\) with regular mapping and period \\(P(G,H)\\). Table  shows several circular granularities constructed using minutes as the bottom granularity. 2.3.2 Quasi-circular granularities A quasi-circular granularity cannot be defined using modular arithmetic because of the irregular mapping. However, they are still formed with linear granularities, one of which groups periodically into the other. shows some examples of quasi-circular granularities. For example, day-of-year is quasi-periodic with either 365 or 366 granules of \\(B\\) (days) within each granule of \\(G&#39;\\) (years). The pattern repeats every \\(4\\) years (ignoring leap seconds). Hence \\(R&#39;= 4\\). \\(Q_{B, G&#39;}\\) is a repetitive categorization of time, similar to circular granularities, except that the number of granules of \\(B\\) is not the same across different granules of \\(G&#39;\\). 2.3.3 Aperiodic granularities Aperiodic linear granularities are those that cannot be specified as a periodic repetition of a pattern of granules as described in Definition . Aperiodic cyclic granularities capture repetitions of these aperiodic linear granularities. Examples include public holidays which repeat every year, but there is no reasonably small span of time within which their behavior remains constant. A classic example is Easter (in the western tradition) whose dates repeat only after 5.7 million years (Reingold and Dershowitz 2001). In Australia, if a standard public holiday falls on a weekend, a substitute public holiday will sometimes be observed on the first non-weekend day (usually Monday) after the weekend. Examples of aperiodic granularity may also include school holidays or a scheduled event. All of these are recurring events, but with non-periodic patterns. Consequently, \\(P_i\\) (as given in ) are essentially infinite for aperiodic granularities. Figure 2.3: (ref:aperiodic-example) (ref:aperiodic-example) Quasi-circular and aperiodic cyclic granularities illustrated by linear (a) and stacked-displays (b) progression of time. The linear display shows the granularities days (\\(B\\)), weeks (\\(G\\)), semester days (\\(B&#39;\\)), and stages of a semester (\\(M\\)) indexed over a linear representation of time. The granules of \\(B&#39;\\) is only defined for days when the semester is running. Here a semester spans 18 weeks and 2 days, and consists of 6 stages. It starts with a week of orientation, followed by an in-session period (6 weeks), a break (1 week), the second half of semester (7 weeks), a 1-week study break before final exams, which spans the next 16 days. This distribution of semester days remains relatively similar for every semester. \\(Q_{B&#39;,M}\\) with P = 128 is a quasi-circular granularity with repeating patterns, while \\(A_{B,M}\\) is an aperiodic cyclic granularity as the placement of the semester within a year varies from year to year with no fixed start and end dates. For example, consider the school semester shown in . Let the linear granularities \\(M_1\\) and \\(M_2\\) denote the teaching and non-teaching stages of the semester respectively. Both \\(M_1\\), \\(M_2\\) and \\(M = M_{1}\\bigcup M_{2}\\) denoting the “stages” of the semester are aperiodic with respect to days (\\(B\\)) or weeks (\\(G\\)). Hence \\(A_{B, M}\\) denoting day-of-the-stage would be an aperiodic cyclic granularity because the placement of the semester within a year would vary across years. Here, \\(Q_{B&#39;, M}\\) denoting semester-day-of-the-stage would be a quasi-circular granularity since the distribution of semester days within a semester is assumed to remain constant over years. Here semester-day is denoted by “sem day” (\\(B&#39;\\)) and its granules are only defined for the span of the semesters. 2.3.4 Relativities The hierarchical structure of time creates a natural nested ordering which can be used in the computation of relative pairs of granularities. For example, shows the hierarchy table for the Mayan calendar. In the Mayan calendar, one day was referred to as a kin and the calendar was structured such that 1 kin = 1 day; 1 uinal = 20 kin; 1 tun = 18 uinal (about a year); 1 katun = 20 tun (20 years) and 1 baktun = 20 katun. Like most calendars, the Mayan calendar used the day as the basic unit of time (Reingold and Dershowitz 2001). The structuring of larger units, weeks, months, years and cycle of years, though, varies substantially between calendars. For example, the French revolutionary calendar divided each day into 10 “hours,” each “hour” into 100 “minutes” and each “minute” into 100 “seconds,” the duration of which is 0.864 common seconds. Nevertheless, for any calendar, a hierarchy table can be defined. Note that it is not always possible to organize an aperiodic linear granularity in a hierarchy table. Hence, we assume that the hierarchy table consists of periodic linear granularities only, and that the cyclic granularity \\(C_{G(\\ell),G(m)}\\) is either circular or quasi-circular. In the Mayan calendar (Table ??), kin-of-tun or kin-of-baktun are examples of multiple-order-up granularities and single-order-up granularities are kin-of-uinal, uinal-of-tun etc. 2.3.5 Computation Following the calendar algebra of Ning, Wang, and Jajodia (2002) for linear granularities, we can define cyclic calendar algebra to compute cyclic granularities. Cyclic calendar algebra comprises two kinds of operations: (1) single-to-multiple (the calculation of multiple-order-up cyclic granularities from single-order-up cyclic granularities) and (2) multiple-to-single (the reverse). Single-to-multiple order-up Methods to obtain multiple-order-up granularity will depend on whether the hierarchy consists of all circular single-order-up granularities or a mix of circular and quasi-circular single-order-up granularities. Circular single-order-up granularities can be used recursively to obtain a multiple-order-up circular granularity using \\[\\begin{equation} \\label{eq:eq7} C_{G_\\ell,G_m}(z) = \\sum_{i=0}^{m - \\ell - 1} P(\\ell, \\ell+i)C_{G_{\\ell+i},G_{\\ell+i+1}}(z), \\end{equation}\\] where \\(\\ell &lt; m - 1\\) and \\(P(i, i) = 1\\) for \\(i=0,1,\\dots,m-\\ell-1\\), and \\(C_{B, G}(z) = z\\mod P(B, G)\\) as per Equation . For example, the multiple-order-up granularity \\(C_{\\text{uinal},\\text{katun}}\\) for the Mayan calendar could be obtained using \\[\\begin{align*} C_{\\text{uinal}, \\text{baktun}}(z) &amp;= C_{\\text{uinal}, \\text{tun}}(z) + P(\\text{uinal}, \\text{tun})C_{\\text{tun},\\text{katun}}(z) + P(\\text{uinal},\\text{katun})C_{\\text{katun}, \\text{baktun}}(z) \\\\ &amp;= C_{\\text{uinal}, \\text{tun}}(z) + 18 \\times{ C_{\\text{tun},\\text{katun}}(z)} + 18 \\times 20 \\times{C_{\\text{katun}, \\text{baktun}}(z)} \\end{align*}\\] , where \\(z\\) is the index of the bottom granularity \\(kin\\). Now consider the case where there is one quasi-circular single order-up granularity in the hierarchy table while computing a multiple-order-up quasi-circular granularity. Any multiple-order-up quasi-circular granularity \\(C_{\\ell, m}(z)\\) could then be obtained as a discrete combination of circular and quasi-circular granularities. Depending on the order of the combination, two different approaches need to be employed leading to the following cases: \\(C_{G_{\\ell},G_{m&#39;}}\\) is circular and \\(C_{G_{m&#39;},G_{m}}\\) is quasi-circular \\[\\begin{equation} \\label{eq:multifromsingle-quasi1} C_{G_\\ell,G_{m}}(z) = C_{G_{\\ell},G_{m&#39;}}(z) + P(\\ell, m&#39;)C_{G_{m&#39;},G_{m}}(z) \\end{equation}\\] \\(C_{G_{\\ell},G_{m&#39;}}\\) is quasi-circular and \\(C_{G_{m&#39;},G_{m}}\\) is circular \\[\\begin{equation} \\label{eq:multifromsingle-quasi2} C_{G_\\ell,G_{m}}(z) = C_{G_{\\ell},G_{m&#39;}}(z) + \\sum_{w=0}^{C_{G_{m&#39;},G_{m}}(z) -1}(\\vert T_{w} \\vert) \\end{equation}\\] where, \\(T_w\\) is such that \\(G_{m&#39;}(w) = \\bigcup_{z \\in T_w}G_{\\ell}\\) and \\(\\vert T_w \\vert\\) is the cardinality of set \\(T_w\\). For example, the Gregorian calendar () has day-of-month as a single-order-up quasi-circular granularity, with the other granularities being circular. Using Equations and , we then have: \\[ C_{hour, month}(z) = C_{hour, day}(z) + P(hour, day)*C_{day, month}(z) \\] \\[ C_{day, year}(z) = C_{day,month}(z) + \\sum_{w=0}^{C_{month, year}(z)-1}(\\vert T_{w} \\vert), \\] where \\(T_w\\) is such that \\(month(w) = \\bigcup_{z \\in T_w}day(z)\\). Multiple-to-single order-up Similar to single-to-multiple operations, multiple-to-single operations involve different approaches for all circular single-order-up granularities and a mix of circular and quasi-circular single-order-up granularities in the hierarchy. For a hierarchy table \\(H_n: (G, C, K)\\) with only circular single-order-up granularities and \\(\\ell_1, \\ell_2, m_1, m_2 \\in {1, 2, \\dots, n}\\) and \\(\\ell_2&lt;\\ell_1\\) and \\(m_2&gt;m_1\\), multiple-order-up granularities can be obtained using Equation . \\[\\begin{equation} \\label{eq:all-circular-multiple} C_{G_{\\ell_1}, G_{m_1}}(z) = \\lfloor C_{G_{\\ell_2}, G_{m_2}}(z)/P(\\ell_2,\\ell_1) \\rfloor \\mod P(\\ell_1, m_1) \\end{equation}\\] For example, in the Mayan Calendar, it is possible to compute the single-order-up granularity tun-of-katun from uinal-of-baktun, since \\(C_{tun, katun}(z) = \\lfloor C_{uinal, baktun}(z)/18\\rfloor \\mod 20\\). Multiple order-up quasi-circular granularities Single-order-up quasi-circular granularity can be obtained from multiple-order-up quasi-circular granularity and single/multiple-order-up circular granularity using Equations and . "],["2.4-sec:data-structure.html", "2.4 Data structure", " 2.4 Data structure Effective exploration and visualization benefit from well-organized data structures. Wang, Cook, and Hyndman (2020a) introduced the tidy “tsibble” data structure to support exploration and modeling of temporal data. This forms the basis of the structure for cyclic granularities. A tsibble comprises an index, optional key(s), and measured variables. An index is a variable with inherent ordering from past to present and a key is a set of variables that define observational units over time. A linear granularity is a mapping of the index set to subsets of the time domain. For example, if the index of a tsibble is days, then a linear granularity might be weeks, months or years. A bottom granularity is represented by the index of the tsibble. All cyclic granularities can be expressed in terms of the index set. shows the tsibble structure (index, key, measurements) augmented by columns of cyclic granularities. The total number of cyclic granularities depends on the number of linear granularities considered in the hierarchy table and the presence of any aperiodic cyclic granularities. For example, if we have \\(n\\) periodic linear granularities in the hierarchy table, then \\(n(n-1)/2\\) circular or quasi-circular cyclic granularities can be constructed. Let \\(N_C\\) be the total number of contextual circular, quasi-circular and aperiodic cyclic granularities that can originate from the underlying periodic and aperiodic linear granularities. Simultaneously encoding more than a few of these cyclic granularities when visualizing the data overwhelms human comprehension. Instead, we focus on visualizing the data split by pairs of cyclic granularities (\\(C_i\\), \\(C_j\\)). Data sets of the form &lt;\\(C_i\\), \\(C_j\\), \\(v\\)&gt; then allow exploration and analysis of the measured variable \\(v\\). 2.4.1 Harmonies and clashes The way granularities are related is important when we consider data visualizations. Consider two cyclic granularities \\(C_i\\) and \\(C_j\\), such that \\(C_i\\) maps index set to a set \\(\\{A_k \\mid k=1,\\dots,K\\}\\) and \\(C_j\\) maps index set to a set \\(\\{B_\\ell \\mid \\ell =1,\\dots,L\\}\\). Here, \\(A_k\\) and \\(B_\\ell\\) are the levels/categories corresponding to \\(C_i\\) and \\(C_j\\) respectively. Let \\(S_{k\\ell}\\) be a subset of the index set such that for all \\(s \\in S_{k\\ell}\\), \\(C_i(s) = A_k\\) and \\(C_j(s) = B_\\ell\\). There are \\(KL\\) such data subsets, one for each combination of levels (\\(A_k\\), \\(B_\\ell\\)). Some of these sets may be empty due to the structure of the calendar, or because of the duration and location of events in a calendar. Structurally empty combinations can arise due to the structure of the calendar or hierarchy. For example, let \\(C_i\\) be day-of-month with 31 levels and \\(C_j\\) be day-of-year with 365 levels. There will be \\(31\\times 365=11315\\) sets \\(S_{k\\ell}\\) corresponding to possible combinations of \\(C_i\\) and \\(C_j\\). Many of these are empty. For example, \\(S_{1,5}\\) is empty because the first day of the month can never correspond to the fifth day of the year. Hence the pair (day-of-month, day-of-year) is a clash. Event-driven empty combinations arise due to differences in event location or duration in a calendar. For example, let \\(C_i\\) be day-of-week with 7 levels and \\(C_j\\) be working-day/non-working-day with 2 levels. While potentially all of these 14 sets \\(S_{k\\ell}\\) can be non-empty (it is possible to have a public holiday on any day-of-week), in practice many of these will probably have very few observations. For example, there are few (if any) public holidays on Wednesdays or Thursdays in any given year in Melbourne, Australia. An example of harmony is where \\(C_i\\) and \\(C_j\\) denote day-of-week and month-of-year respectively. So \\(C_i\\) will have 7 levels while \\(C_j\\) will have 12 levels, giving \\(12\\times7=84\\) sets \\(S_{k\\ell}\\). All of these are non-empty because every day-of-week can occur in every month. Hence, the pair (day-of-week, month-of-year) is a harmony. 2.4.2 Near-clashes Suppose \\(C_i\\) denotes day-of-year and \\(C_j\\) denotes day-of-week. While any day of the week can occur on any day of the year, some combinations will be very rare. For example, the 366th day of the year will only coincide with a Wednesday approximately every 28 years on average. We refer to these as “near-clashes.” "],["2.5-sec:visualization.html", "2.5 Visualization", " 2.5 Visualization The purpose is to visualize the distribution of the continuous variable (\\(v\\)) conditional on the values of two granularities, \\(C_i\\) and \\(C_j\\). Since \\(C_i\\) and \\(C_j\\) are factors or categorical variables, data subsets corresponding to each combination of their levels form a subgroup and the visualization amounts to having displays of distributions for different subgroups. The response variable \\((v)\\) is plotted on the y-axis and the levels of \\(C_i (C_j)\\) on the x-axis, conditional on the levels of \\(C_j (C_i)\\). This means, carrying out the same plot corresponding to each level of the conditioning variable. This is consistent with the widely used grammar of graphics which is a framework to construct statistical graphics by relating the data space to the graphic space (Wilkinson 1999), (Wickham 2016). 2.5.1 Data summarization There are several ways to summarize the distribution of a data set such as estimating the empirical distribution or density of the data, or computing a few quantiles or other statistics. This estimation or summarization could be potentially misleading if it is performed on rarely occurring categories (Section ). Even when there are no rarely occurring events, the number of observations may vary greatly within or across each facet, due to missing observations or uneven locations of events in the time domain. In such cases, data summarization should be used with caution as sample sizes will directly affect the accuracy of the estimated quantities being displayed. 2.5.2 Display choices for univariate distributions The basic plot choice for our data structure is one that can display distributions. For displaying the distribution of a continuous univariate variable, many options are available. Displays based on descriptive statistics include box plots (Tukey 1977) and its variants such as notched box plots (McGill, Tukey, and Larsen 1978) or other variations as mentioned in Wickham and Stryjewski (2012). They also include line or area quantile plots which can display any quantiles and not only quartiles like in a boxplot. Plots based on kernel density estimates include violin plots (Hintze and Nelson 1998), summary plot (Potter et al. 2010), ridge line plots (Wilke 2020), and highest density region (HDR) plots (Hyndman 1996). The less commonly used Letter-Value plots (Hofmann, Wickham, and Kafadar 2017) is midway between boxplots and density plots. Letter values are order statistics with specific depths, for example, the median (\\(M\\)) is a letter value that divides the data set into halves. Each of the next letter values splits the remaining parts into two separate regions so that the fourths (\\(F\\)), eighths (\\(E\\)), sixteenths (\\(D\\)), etc. are obtained. They are useful for displaying the distributions beyond the quartiles especially for large data, where boxplots mislabel data points as outliers. One of the best approaches in exploratory data analysis is to draw a variety of plots to reveal information while keeping in mind the drawbacks and benefits of each of the plot choices. For example, boxplots obscure multimodality, and interpretation of density estimates and histograms may change depending on the bandwidth and binwidths respectively. In R package gravitas (Gupta et al. 2020), boxplots, violin, ridge, letter-value, line and area quantile plots are implemented, but it is potentially possible to use any plots which can display the distribution of the data. 2.5.3 Comparison across sub-groups induced by conditioning Levels The levels of cyclic granularities affect plotting choices since space and resolution may be problematic with too many levels. A potential approach could be to categorize the number of levels as low/medium/high/very high for each cyclic granularity and define some criteria based on human cognitive power, available display size and the aesthetic mappings. Default values for these categorizations could be chosen based on levels of common temporal granularities like days of the month, days of the fortnight, or days of the week. Synergy of cyclic granularities The synergy of the two cyclic granularities will affect plotting choices for exploratory analysis. Cyclic granularities that form clashes (Section 2.4.1) or near-clashes lead to potentially ineffective graphs. Harmonies tend to be more useful for exploring patterns. a shows the distribution of half-hourly electricity consumption through letter value plots across months of the year conditional on quarters of the year. This plot does not work because quarter-of-year clashes with month-of-year, leading to empty subsets. For example, the first quarter never corresponds to December. Figure 2.4: Distribution of energy consumption displayed as letter value plots, illustrating harmonies and clashes, and how mappings change emphasis: a weekday/weekend faceted by quarter-of-year produces a harmony, b quarter-of-year faceted by weekday/weekend produces a harmony, c month-of-year faceted by quarter-of-year produces a clash, as indicated by the empty sets and white space. Placement within a facet should be done for primary comparisons. For example, arrangement in a makes it easier to compare across weekday type (x-axis) within a quarter (facet). It can be seen that in quarter 2, there is more mass occupied the lower tail on the weekends (letter value E corresponding to tail area 1/8) relative to that of the weekdays (letter value D 1/16), which corresponds to more days with lower energy use in this period. Conditioning variable When \\(C_i\\) is mapped to the \\(x\\) position and \\(C_j\\) to facets, then the \\(A_k\\) levels are juxtaposed and each \\(B_\\ell\\) represents a group/facet. Gestalt theory suggests that when items are placed in close proximity, people assume that they are in the same group because they are close to one another and apart from other groups. Hence, in this case, the \\(A_k\\)’s are compared against each other within each group. With the mapping of \\(C_i\\) and \\(C_j\\) reversed, the emphasis will shift to comparing \\(B_\\ell\\) levels rather than \\(A_k\\) levels. For example, b shows the letter value plot across weekday/weekend partitioned by quarters of the year and c shows the same two cyclic granularities with their mapping reversed. b helps us to compare weekday and weekend within each quarter and c helps to compare quarters within weekend and weekday. "],["2.6-sec:application.html", "2.6 Applications", " 2.6 Applications 2.6.1 Smart meter data of Australia Smart meters provide large quantities of measurements on energy usage for households across Australia. One of the customer trials (Department of the Environment and Energy 2018) conducted as part of the Smart Grid Smart City project in Newcastle and parts of Sydney provides customer level data on energy consumption for every half hour from February 2012 to March 2014. We can use this data set to visualize the distribution of energy consumption across different cyclic granularities in a systematic way to identify different behavioral patterns. Cyclic granularities search and computation The tsibble object smart_meter10 from R package gravitas (Gupta et al. 2020) includes the variables reading_datetime, customer_id and general_supply_kwh denoting the index, key and measured variable respectively. The interval of this tsibble is 30 minutes. To identify the available cyclic time granularities, consider the conventional time deconstructions for a Gregorian calendar that can be formed from the 30-minute time index: half-hour, hour, day, week, month, quarter, half-year, year. In this example, we will consider the granularities hour, day, week and month giving six cyclic granularities “hour_day,” “hour_week,” “hour_month,” “day_week,” “day_month” and “week_month,” read as “hour of the day,” etc. To these, we add day-type (“wknd_wday”) to capture weekend and weekday behavior. Now that we have a list of cyclic granularities to look at, we can compute them using the results in Section . Screening and visualizing harmonies Using these seven cyclic granularities, we want to explore patterns of energy behavior. Each of these seven cyclic granularities can either be mapped to the x-axis or to facets. Choosing \\(2\\) of the possible \\(7\\) granularities, gives \\(^{7}P_2 = 42\\) candidates for visualization. Harmonies can be identified among those \\(42\\) possibilities to narrow the search. shows \\(16\\) harmony pairs after removing clashes and any cyclic granularities with more than \\(31\\) levels, as effective exploration becomes difficult with many levels (Section ). Figure 2.5: Energy consumption of a single customer shown with different distribution displays, and granularity arrangements: hour of the day; and weekday/weekend. a The side-by-side boxplots make the comparison between day types easier, and suggest that there is generally lower energy use on the weekend. Interestingly, this is the opposite to what might be expected. Plots b, c examine the temporal trend of consumption over the course of a day, separately for the type of day. The area quantile emphasizes time, and indicates that median consumption shows prolonged high usage in the morning on weekdays. The violin plot emphasizes subtler distributional differences across hours: morning use is bimodal. A few harmony pairs are displayed in to illustrate the impact of different distribution plots and reverse mapping. For each of b and c, \\(C_i\\) denotes day-type (weekday/weekend) and \\(C_j\\) is hour-of-day. The geometry used for displaying the distribution is chosen as area-quantiles and violins in b and c respectively. a shows the reverse mapping of \\(C_i\\) and \\(C_j\\) with \\(C_i\\) denoting hour-of-day and \\(C_j\\) denoting day-type with distribution geometrically displayed as boxplots. In b, the black line is the median, whereas the purple (narrow) band covers the 25th to 75th percentile, the orange (middle) band covers the 10th to 90th percentile, and the green (broad) band covers the 1st to 99th percentile. The first facet represents the weekday behavior while the second facet displays the weekend behavior; energy consumption across each hour of the day is shown inside each facet. The energy consumption is extremely skewed with the 1st, 10th and 25th percentile lying relatively close whereas 75th, 90th and 99th lying further away from each other. This is common across both weekdays and weekends. For the first few hours on weekdays, median energy consumption starts and continues to be higher for longer compared to weekends. The same data is shown using violin plots instead of quantile plots in c. There is bimodality in the early hours of the day for weekdays and weekends. If we visualize the same data with reverse mapping of the cyclic granularities (a), then the natural tendency would be to compare weekend and weekday behavior within each hour and not across hours. Then it can be seen that median energy consumption for the early morning hours is higher for weekdays than weekends. Also, outliers are more prominent in the later hours of the day. All of these indicate that looking at different distribution geometry or changing the mapping can shed light on different aspects of energy behavior for the same sample. 2.6.2 T20 cricket data of Indian Premier League Our proposed approach can be generalized to other hierarchical granularities where there is an underlying ordered index. We illustrate this with data from the sport cricket. Cricket is played with two teams of 11 players each, with each team taking turns batting and fielding. This is similar to baseball, wherein the batsman and bowler in cricket are analogous to a batter and pitcher in baseball. A wicket is a structure with three sticks, stuck into the ground at the end of the cricket pitch behind the batsman. One player from the fielding team acts as the bowler, while another takes up the role of the wicket-keeper (similar to a catcher in baseball). The bowler tries to hit the wicket with a ball, and the batsman defends the wicket using a bat. At any one time, two of the batting team and all of the fielding team are on the field. The batting team aims to score as many runs as possible, while the fielding team aims to successively dismiss 10 players from the batting team. The team with the highest number of runs wins the match. Cricket is played in various formats and Twenty20 cricket (T20) is a shortened format, where the two teams have a single innings each, which is restricted to a maximum of 20 overs. An over will consist of 6 balls (with some exceptions). A single match will consist of 2 innings and a season consists of several matches. Although there is no conventional time component in cricket, each ball can be thought to represent an ordering over the course of the game. Then, we can conceive a hierarchy where the ball is nested within overs, overs nested within innings, innings within matches, and matches within seasons. Cyclic granularities can be constructed using this hierarchy. Example granularities include ball of the over, over of the innings, and ball of the innings. The hierarchy table is given in . Although most of these cyclic granularities are circular by the design of the hierarchy, in practice some granularities are aperiodic. For example, most overs will consist of 6 balls, but there are exceptions due to wide balls, no-balls, or when an innings finishes before the over finishes. Thus, the cyclic granularity ball-of-over may be aperiodic. The Indian Premier League (IPL) is a professional T20 cricket league in India contested by eight teams representing eight different cities in India. The IPL ball-by-ball data is provided in the cricket data set in the gravitas package for a sample of 214 matches spanning 9 seasons (2008 to 2016). Many interesting questions could be addressed with the cricket data set. For example, does the distribution of total runs depend on whether a team bats in the first or second innings? The Mumbai Indians (MI) and Chennai Super Kings (CSK) appeared in the final playoffs from 2010 to 2015. Using data from these two teams, it can be observed (a) that for the team batting in the first innings there is an upward trend of runs per over, while there is no clear upward trend in the median and quartile deviation of runs for the team batting in the second innings after the first few overs. This suggests that players feel mounting pressure to score more runs as they approach the end of the first innings, while teams batting second have a set target in mind and are not subjected to such mounting pressure and therefore may adopt a more conservative run-scoring strategy. Another question that can be addressed is if good fielding or bowling (defending) in the previous over affects the scoring rate in the subsequent over? To measure the defending quality, we use an indicator function on dismissals (1 if there was at least one wicket in the previous over, 0 otherwise). The scoring rate is measured by runs per over. b shows that no dismissals in the previous over leads to a higher median and quartile spread of runs per over compared to the case when there has been at least one dismissal in the previous over. This seems to be unaffected by the over of the innings (the faceting variable). This might be because the new batsman needs to “play himself in” or the dismissals lead the (not-dismissed) batsman to adopt a more defensive playstyle. Run rates will also vary depending on which player is facing the next over and when the wicket falls in the previous over. Here, wickets per over is an aperiodic cyclic granularity, so it does not appear in the hierarchy table. These are similar to holidays or special events in temporal data. Figure 2.6: Examining distribution of runs per by innings, over of the innings and number of wickets in previous innings. Plot a displays distribution using letter value plots. A gradual upward trend in runs per over can be seen in innings 1, which is not present in innings 2. Plot b shows quantile plots of runs per over across an indicator of wickets in the previous over, faceted by current over. When a wicket occurred in the previous over, the runs per over tends to be lower throughout the innings. "],["2.7-sec:discussion.html", "2.7 Discussion", " 2.7 Discussion Exploratory data analysis involves many iterations of finding and summarizing patterns. With temporal data available at ever finer scales, exploring periodicity can become overwhelming with so many possible granularities to explore. This work provides tools to classify and compute possible cyclic granularities from an ordered (usually temporal) index. We also provide a framework to systematically explore the distribution of a univariate variable conditional on two cyclic time granularities using visualizations based on the synergy and levels of the cyclic granularities. The gravitas package provides very general tools to compute and manipulate cyclic granularities, and to generate plots displaying distributions conditional on those granularities. A missing piece in the package gravitas is the computation of cyclic aperiodic granularities which would require computing aperiodic linear granularities first. A few R packages including almanac(Vaughan 2020) and gs(Laird-Smith 2020) provide the tools to create recurring aperiodic events. These functions can be used with the gravitas package to accommodate aperiodic cyclic granularities. We propose producing plots based on pairs of cyclic granularities that form harmonies rather than clashes or near-clashes. A future direction of work could be to further refine the selection of appropriate pairs of granularities by identifying those for which the differences between the displayed distributions is greatest and rating these selected harmony pairs in order of importance for exploration. "],["thanksgravitas.html", "Acknowledgments", " Acknowledgments The Australian authors thank the ARC Centre of Excellence for Mathematical and Statistical Frontiers (ACEMS) for supporting this research. Thanks to Data61 CSIRO for partially funding Sayani’s research and Dr Peter Toscas for providing useful inputs on improving the analysis of the smart meter application. We would also like to thank Nicholas Spyrison for many useful discussions, sketching figures and feedback on the manuscript. The package gravitas was built during the Google Summer of Code, 2019. More details about the package can be found at sayani07.github.io/gravitas. The Github repository, github.com/Sayani07/paper-gravitas, contains all materials required to reproduce this article and the code is also available online in the supplemental materials. This article was created with knitr (Xie 2015), (Xie 2020) and rmarkdown (Xie, Allaire, and Grolemund 2018), (Allaire et al. 2020). "],["supplement-gravitas.html", "Supplementary Materials", " Supplementary Materials Data and scripts: Data sets and R code to reproduce all figures in this article (main.R). R-package: The ideas presented in this article have been implemented in the open-source R (R Core Team 2021) package gravitas (Gupta et al. 2020), available from CRAN. The R-package facilitates manipulation of single and multiple-order-up time granularities through cyclic calendar algebra, checks feasibility of creating plots or drawing inferences for any two cyclic granularities by providing list of harmonies and recommends possible visual summaries through factors described in the article. Version 0.1.3 of the package was used for the results presented in the article and is available on Github (https://github.com/Sayani07/gravitas). "],["3-ch-hakear.html", "Chapter 3 Detecting distributional differences between temporal granularities for exploratory time series analysis", " Chapter 3 Detecting distributional differences between temporal granularities for exploratory time series analysis Cyclic temporal granularities, which are temporal deconstructions of a time period into units such as hour-of-the-day, work-day/weekend, can be useful for measuring repetitive patterns in large univariate time series data. The granularities feed new approaches to exploring time series data. One use is to take pairs of granularities, and make plots of response values across the categories induced by the temporal deconstruction. However, when there are many granularities that can be constructed for a time period, there will also be too many possible displays to decide which might be the more interesting to display. This work proposes a new distance metric to screen and rank the possible granularities, and hence choose the most interesting ones to plot. The distance measure is computed for a single or pairs of cyclic granularities can can be compared across different cyclic granularities and also on a collection of time series. The methods are implemented in the open-source R package hakear. "],["3.1-introduction-1.html", "3.1 Introduction", " 3.1 Introduction Cyclic temporal granularities (Bettini et al. 1998; Gupta et al. 2021) are temporal deconstructions that define cyclic repetitions in time, e.g. hour-of-day, day-of-month, or regularly scheduled public holidays. These granularities form ordered or unordered categorical variables. An example of an ordered granularity is day-of-week, where Tuesday is always followed by Wednesday, and so on. An unordered granularity example is . We can use granularities to explore patterns in univariate time series by examining the distribution of the measured variable across different categories of the cyclic granularities. Figure 3.1: A cyclic granularity can be considered to be a categorical variable, and used to break the data into subsets. Here, side-by-side boxplots overlaid on jittered dotplots explore the distribution of of energy use by a household for two different cyclic granularities: (a) hour-of-day and (b) and month-of-year. Daily peaks occur in morning and evening hours, indicating a working household, where members leave for and return from work. More volatility of usage in summer months (Jan, Feb) is probably due air conditioner use on just some days. As a motivating example, consider Figure which shows electricity smart meter data plotted against two granularities (hour-of-day, month-of-year). The data was collected on a single household in Melbourne, Australia, over a six month period, and was previously used in Wang, Cook, and Hyndman (2020b). The categorical variable (granularity) is mapped to the x-axis, and the distribution of the response variable is displayed using both side-by-side jittered dotplots and boxplots. From panel (a) it can be seen that energy consumption is higher during the morning hours (5–8), when members in the household wake up, and again in the evening hours (17–20) possibly when members get back from work. In addition, the largest variation in energy use is in the afternoon hours (12–16), as seen in the length of the boxes. From panel (b), it is seen that the variability in energy usage is higher in Jan and Feb, probably due to the usage of air conditioners on some days. The median usage is highest in January, dips in February–April and rises again in May–June, although not to the height of January usage. This suggests that the household does not use as much electricity for heating as it does for air conditioning. A lot of households in Victoria use gas heating and hence the heater use might not be reflected in the electricity data. Many different displays could be constructed using different granularities including day-of-week, day-of-month, weekday/weekend, etc. However, only a few might be interesting and reveal important patterns in energy usage. Determining which displays have “significant” distributional differences between categories of the cyclic granularity, and plotting only these, would make for efficient exploration. Figure 3.2: Distribution of energy consumption displayed through area quantile plots across two cyclic granularities month-of-year and hour-of-day and two households. The black line is the median, whereas the orange band covers the 25th to 75th percentile and the green band covers the 10th to 90th percentile. Difference between the 90th and 75th quantiles is less for (Jan, Feb) for the first household (a), suggesting that it is a more frequent user of air conditioner than the second household (b). Energy consumption for in (a) changes across both granularities, whereas for (b) daily pattern stays same irrespective of the months. Exploring the distribution of the measured variable across two cyclic granularities provides more detailed information on its structure. For example, Figure (a) shows the usage distribution across hour-of-day conditional on month-of-year across two households. It shows the hourly usage over a day does not remain the same across months. Unlike other months, the 75th and 90th percentile for all hours of the day in January are high, similar, and are not characterized by a morning and evening peak. The household in Figure (b) has 90th percentile consumption higher in summer months relative to autumn or winter, but the 75th and 90th percentile are far apart in all months, implying that the second household resorts to air conditioning much less regularly than the first one. The differences seem to be more prominent across month-of-year (facets) than hour-of-day (x-axis) for this household, whereas they are prominent for both cyclic granularities for the first household. Are all four displays in Figures and useful in understanding the distributional difference in energy usage? Which ones are more useful than others? If \\(N_C\\) is the total number of cyclic granularities of interest, the number of displays that could be potentially informative is \\(N_C\\) when considering displays of the form in Figure . The dimension of the problem, however, increases when considering more than one cyclic granularity. When considering displays of the form in Figure , there are \\(N_C(N_C-1)\\) possible pairwise plots exhaustively, with one of the two cyclic granularities acting as the conditioning variable. This can be overwhelming for human consumption even for moderately large \\(N_C\\). It is therefore useful to identify those displays that are informative across at least one cyclic granularity. This problem is similar to Scagnostics (Scatterplot Diagnostics) by Tukey and Tukey (1988), which are used to identify meaningful patterns in large collections of scatterplots. Given a set of \\(v\\) variables, there are \\(v(v-1)/2\\) pairs of variables, and thus the same number of possible pairwise scatterplots. Therefore, even for small \\(v\\), the number of scatterplots can be large, and scatterplot matrices (SPLOMs) can easily run out of pixels when presenting high-dimensional data. Dang and Wilkinson (2014) and Wilkinson, Anand, and Grossman (2005) provide potential solutions to this, where a few characterizations can be used to locate anomalies in density, shape, trend, and other features in the 2D point scatters. In this paper, we provide a solution to narrowing down the search from \\(N_C(N_C-1)\\) conditional distribution plots by introducing a new distance measure that can be used to detect significant distributional differences across cyclic granularities. This work is a natural extension of our previous work (Gupta et al. 2021) which narrows down the search from \\(N_C(N_C-1)\\) plots by identifying pairs of granularities that can be meaningfully examined together (a “harmony”), or when they cannot (a “clash”). However, even after excluding clashes, the list of harmonies left may be too large for exhaustive exploration. Hence, there is a need to reduce the search even further by including only those harmonies that contain useful information. Buja et al. (2009) and Majumder, Hofmann, and Cook (2013) present methods for statistical significance testing of visual findings using human cognition as the statistical tests. In this paper, the visual discovery of distributional differences is facilitated by choosing a threshold for the proposed numerical distance measure, eventually selecting only those cyclic granularities for which the distributional differences are sufficient to make it an interesting display. The article is organized as follows. Section introduces a distance measure for detecting distributional difference in temporal granularities, which enables identification of patterns in the time series data; Section devises a selection criterion by choosing a threshold, which results in detection of only significantly interesting patterns. Section provides a simulation study on the proposed methodology. Section presents an application to residential smart meter data in Melbourne to show how the proposed methodology can be used to automatically detect temporal granularities along which distributional differences are significant. "],["3.2-sec:computation-wpd.html", "3.2 Proposed distance measure", " 3.2 Proposed distance measure We propose a measure called Weighted Pairwise Distances (\\(\\wpd\\)) to detect distributional differences in the measured variable across cyclic granularities. 3.2.1 Principle Figure 3.3: An example illustrating the principle of the proposed distance measure, displaying the distribution of a normally distributed variable in four panels each with two x-axis categories and three facet levels, but with different designs. Panel (a) is not interesting as the distribution of the variable does not depend on x or facet categories. Panels (b) and (c) are more interesting than (a) since there is a change in distribution either across facets (b) or x-axis (c). Panel (d) is most interesting in terms of capturing structure in the variable as the distribution of the variable changes across both facet and x-axis variable. The value of our proposed distance measure is presented for each panel, the relative differences between which will be explained later in Section 3.3.2. The principle behind the construction of \\(\\wpd\\) is explained through a simple example in Figure . Each of these figures describes a panel with two x-axis categories and three facet levels, but with different designs. Figure a has all categories drawn from a standard normal distribution for each facet. It is not a particularly interesting display, as the distributions do not vary across x-axis or facet categories. Figure b has x categories drawn from the same distribution, but across facets the distributions are three standard deviations apart. Figure c exhibits the opposite situation where distribution between the x-axis categories are three standard deviations apart, but they do not change across facets. In Figure d, the distribution varies across both facet and x-axis categories by three standard deviations. If the panels are to be ranked in order of capturing maximum variation in the measured variable from minimum to maximum, then an obvious choice would be (a) followed by (b), (c) and then (d). It might be argued that it is not clear if (b) should precede or succeed (c) in the ranking. Gestalt theory suggests items placed at close proximity can be compared more easily, because people assume that they are in the same group and apart from other groups. With this principle in mind, Panel (b) is considered less informative compared to Panel (c) in emphasizing the distributional differences. For displays showing a single cyclic granularity rather than pairs of granularities, we have only two design choices corresponding to no difference and significant differences between categories of that cyclic granularity. The proposed measure \\(\\wpd\\) is constructed in such a way that it can be used to rank panels of different designs as well as test if a design is interesting. This measure is aimed to be an estimate of the maximum variation in the measured variable explained by the panel. A higher value of \\(\\wpd\\) would indicate that the panel is interesting to look at, whereas a lower value would indicate otherwise. 3.2.2 Notation Let the number of cyclic granularities considered in the display be \\(m\\). The notations and methodology are described in detail for \\(m=2\\). But it can be easily extended to \\(m&gt;2\\). Consider two cyclic granularities \\(A\\) and \\(B\\), such that \\(A = \\{a_j: j = 1, 2, \\dots, \\nx\\}\\) and \\(B = \\{b_k: k = 1, 2, \\dots, \\nf\\}\\) with \\(A\\) placed across the x-axis and \\(B\\) across facets. Let \\(v = \\{v_t: t = 0, 1, 2, \\dots, T-1\\}\\) be a continuous variable observed across \\(T\\) time points. This data structure with \\(\\nx\\) x-axis levels and \\(\\nf\\) facet levels is referred to as a \\((\\nx, \\nf)\\) panel. For example, a \\((2, 3)\\) panel will have cyclic granularities with two x-axis levels and three facet levels. Let the four elementary designs as described in Figure be \\(\\Dnull\\) (referred to as “null distribution”) where there is no difference in distribution of \\(v\\) for \\(A\\) or \\(B\\), \\(\\Df\\) denotes the set of designs where there is difference in distribution of \\(v\\) for \\(B\\) and not for \\(A\\). Similarly, \\(\\Dx\\) denotes the set of designs where difference is observed only across A. Finally, \\(\\Dfx\\) denotes those designs for which difference is observed across both \\(A\\) and \\(B\\). We can consider a single granularity (\\(m = 1\\)) as a special case of two granularities with \\(\\nf = 1\\). 3.2.3 Computation The computation of the distance measure \\(\\wpd\\) for a panel involves characterizing distributions, computing distances between distributions, choosing a tuning parameter to specify the weight for different groups of distances and summarizing those weighted distances appropriately to estimate maximum variation. Furthermore, the data needs to be appropriately transformed to ensure that the value of \\(\\wpd\\) emphasizes detection of distributional differences across categories and not across different data generating processes. Data transformation The intended aim of \\(\\wpd\\) is to capture differences in categories irrespective of the distribution from which the data is generated. Hence, as a pre-processing step, the raw data is normal-quantile transformed (NQT) (Krzysztofowicz 1997), so that the transformed data follows a standard normal distribution. The empirical NQT involves the following steps: The observations of measured variable \\(v\\) are sorted from the smallest to the largest observation \\(v_{(1)},\\dots, v_{(n)}\\). The cumulative probabilities \\(p_{(1)},\\dots, p_{(n)}\\) are estimated using \\(p_{(i)} = i/(n + 1)\\) (Hyndman and Fan 1996) so that \\(p_{(i)} = \\text{Pr}(v \\leq v_{(i)})\\). Each observation \\(v_{(i)}\\) of \\(v\\) is transformed into \\(v^*(i) = \\Phi^{-1}(p(i))\\), with \\(\\Phi\\) denoting the standard normal distribution function. Characterizing distributions Multiple observations of \\(v\\) correspond to the subset \\(v_{jk} = \\{s: A(s) = j, B(s) = k\\}\\). The number of observations might vary widely across subsets due to the structure of the calendar, missing observations or uneven locations of events in the time domain. In this paper, quantiles of \\(\\{v_{jk}\\}\\) are chosen as a way to characterize distributions for the category \\((a_j, b_k)\\), \\(\\forall j\\in \\{1, 2, \\dots, \\nx\\}, k\\in \\{1, 2, \\dots, \\nf\\}\\). We use percentiles with \\(p = {0.01, 0.02, \\dots, 0.99}\\) to reduce the computational burden in summarizing distributions. Distance between distributions A common way to measure divergence between distributions is the Kullback-Leibler (KL) divergence (Kullback and Leibler 1951). The KL divergence denoted by \\(D(q_1||q_2)\\) is a non-symmetric measure of the difference between two probability distributions \\(q_1\\) and \\(q_2\\) and is interpreted as the amount of information lost when \\(q_2\\) is used to approximate \\(q_1\\). The KL divergence is not symmetric and hence can not be considered as a “distance” measure. The Jensen-Shannon divergence (Menéndez et al. 1997) based on the Kullback-Leibler divergence is symmetric and has a finite value. Hence, in this paper, the pairwise distances between the distributions of the measured variable are obtained through the square root of the Jensen-Shannon divergence, called Jensen-Shannon distance (JSD), and defined by, \\[ JSD(q_1||q_2) = \\frac{1}{2}D(q_1||M) + \\frac{1}{2}D(q_2||M), \\] where \\(M = \\frac{q_1+q_2}{2}\\) and \\(D(q_1||q_2) := \\int^\\infty_{-\\infty} q_1(x)f(\\frac{q_1(x)}{q_2(x)})\\) is the KL divergence between distributions \\(q_1\\) and \\(q_2\\). Other common measures of distance between distributions are Hellinger distance, total variation distance and Fisher information metric. Within-facet and between-facet distances Figure 3.4: Within and between-facet distances shown for two cyclic granularities A and B, where A is mapped to x-axis and B is mapped to facets. The dotted lines represent the distances between different categories. Panels 1) and 2) show the between-facet distances. Panels 3) and 4) are used to illustrate within-facet distances when categories are un-ordered or ordered respectively. When categories are ordered, distances should only be considered for consecutive x-axis categories. Between-facet distances are distances between different facet levels for the same x-axis category, for example, distances between {(\\(a_1\\),\\(b_1\\)) and (\\(a_1\\), \\(b_2\\))} or {(\\(a_1\\),\\(b_1\\)) and (\\(a_1\\), \\(b_3\\))}. Pairwise distances could be within-facets or between-facets for \\(m = 2\\). Figure illustrates how they are defined. Pairwise distances are within-facets when \\(b_{k} = b_{k&#39;}\\), that is, between pairs of the form \\((a_{j}b_{k}, a_{j&#39;}b_{k})\\) as shown in panel (3) of Figure . If categories are ordered (like all temporal cyclic granularities), then only distances between pairs where \\(a_{j&#39;} = (a_{j+1})\\) are considered (panel (4)). Pairwise distances are between-facets when they are considered between pairs of the form \\((a_{j}b_{k}, a_{j}b_{k&#39;})\\). There are a total of \\({\\nf \\choose 2}\\nx\\) between-facet distances, and \\({\\nx \\choose 2}\\nf\\) within-facet distances if they are ordered and \\(\\nf(\\nx-1)\\) within-facet distances if they are unordered. Tuning parameter For displays with \\(m&gt;1\\) granularities, we can use a tuning parameter to specify the relative weight given to each granularity. In general, the tuning parameters should be chosen such that \\(\\sum_{i=1}^m \\lambda_i = 1\\). Following the general principles of Gestalt theory, we wish to weight more heavily granularities that are plotted closer together. For \\(m=2\\) we choose \\(\\lambda_x = \\frac{2}{3}\\) for the granularity on the x-axis and \\(\\lambda_f = \\frac13\\) for the granularity mapped to facets, giving a relative weight of \\(2:1\\) for within-facet to between-facet distances. No human experiment has been conducted to justify this ratio. Specifying \\(\\lambda_x&gt;0.5\\) will weight within-facet distances more heavily, while \\(\\lambda_x &lt;0.5\\) would weight the between-facet distances more heavily. (See the supplements for more details.). Raw distance measure The raw distance measure, denoted by \\(\\wpdsub{raw}\\), is computed after combining all the weighted distance measures appropriately. First, NQT is performed on the measured variable \\(v_t\\) to obtain \\(v^*_t\\) (data transformation). Then, for a fixed harmony pair \\((A, B)\\), percentiles of \\(v^*_{jk}\\) are computed and stored in \\(q_{jk}\\) (distribution characterization). This is repeated for all pairs of categories of the form \\((a_{j} b_{k}, a_{j&#39;}b_{k&#39;}): \\{a_j: j = 1, 2, \\dots, \\nx\\}, B = \\{ b_k: k = 1, 2, \\dots, \\nf\\}\\). The pairwise distances between pairs \\((a_{j} b_{k}, a_{j&#39;}b_{k&#39;})\\) denoted by \\(d_{(jk, j&#39;k&#39;)} = JSD(q_{jk}, q_{j&#39;k&#39;})\\) are computed (distance between distributions). The pairwise distances (within-facet and between-facet) are transformed using a suitable tuning parameter (\\(0&lt;\\lambda&lt;1\\)) depending on if they are within-facet(\\(d_w\\)) or between-facets(\\(d_b\\)) as follows: \\[\\begin{equation}\\label{def:raw-wpd} d*_{(j,k), (j&#39;k&#39;)} = \\begin{cases} \\lambda d_{(jk), (j&#39;k&#39;)},&amp; \\text{if } d = d_w;\\\\ (1-\\lambda) d_{(jk), (j&#39;k&#39;)}, &amp; \\text{if } d = d_b. \\end{cases} \\end{equation}\\] The \\(\\wpdsub{raw}\\) is then computed as \\[ \\wpdsub{raw} = \\max_{j, j&#39;, k, k&#39;}(d*_{(jk), (j&#39;k&#39;)}) \\qquad\\forall j, j&#39; \\in \\{1, 2, \\dots, \\nx\\},\\quad k, k&#39; \\in \\{1, 2, \\dots, \\nf\\} \\] The statistic “maximum” is chosen to combine the weighted pairwise distances since the distance measure is aimed at capturing the maximum variation of the measured variable within a panel. The statistic “maximum” is, however, affected by the number of comparisons (resulting pairwise distances). For example, for a \\((2, 3)\\) panel, there are \\(6\\) possible subsets of observations corresponding to the combinations \\((a_1, b_1), (a_1, b_2), (a_1, b_3), (a_2 ,b_1), (a_2 ,b_2), (a_2, b_3)\\), whereas for a \\((2, 2)\\) panel, there are only \\(4\\) possible subsets \\((a_1, b_1), (a_1, b_2), (a_2 ,b_1), (a_2 ,b_2)\\). Consequently, the measure would have higher values for the panel \\((2, 3)\\) as compared to \\((2, 2)\\), since maximum is taken over higher number of pairwise distances. 3.2.4 Adjusting for the number of comparisons Ideally, it is desired that the proposed distance measure takes a higher value only if there is a significant difference between distributions across categories, and not because the number of categories \\(\\nx\\) or \\(\\nf\\) is high. That is, under designs like \\(\\Dnull\\), their distribution should not differ for a different number of categories. Only then the distance measure could be compared across panels with different levels. This calls for an adjusted measure, which normalizes for the different number of comparisons. Two approaches for adjusting the number of comparisons are discussed, both of which are substantiated using simulations. The first one defines an adjusted measure \\(\\wpdsub{perm}\\) based on the permutation method to remove the effect of different comparisons. The second approach fits a model to represent the relationship between \\(\\wpdsub{raw}\\) and the number of comparisons and defines the adjusted measure (\\(\\wpdsub{glm}\\)) as the residual from the model. Permutation approach This method is somewhat similar in spirit to bootstrap or permutation tests, where the goal is to test the hypothesis that the groups under study have identical distributions. This method accomplishes a different goal of finding the null distribution for different groups (panels in our case) and standardizing the raw values using that distribution. The values of \\(\\wpdsub{raw}\\) is computed on many (\\(\\nsub{perm}\\)) permuted data sets and stored in \\(\\wpdsub{perm-data}\\). Then \\(\\wpdsub{perm}\\) is computed as follows: \\[\\begin{align*} \\wpdsub{perm} = \\frac{(\\wpdsub{raw} - \\text{mean}(\\wpdsub{perm-data}))}{\\text{sd}(\\wpdsub{perm-data})}, \\end{align*}\\] where \\(\\text{mean}(\\wpdsub{perm-data})\\) and \\(\\text{sd}(\\wpdsub{perm-data})\\) are the mean and standard deviation of \\(\\wpdsub{perm-data}\\) respectively. Standardizing \\(\\wpd\\) in the permutation approach ensures that the distribution of \\(\\wpdsub{perm}\\) under \\(\\Dnull\\) has zero mean and unit variance across all comparisons. While this works successfully to make the location and scale similar across different \\(\\nx\\) and \\(\\nf\\), it is computationally heavy and time consuming, and hence less user-friendly. Hence, another approach to adjustment, with potentially less computational time, is proposed. Modeling approach In this approach, a Gamma generalized linear model (GLM) for \\(\\wpdsub{raw}\\) is fitted with the number of comparisons as the explanatory variable. Since, \\(\\wpdsub{raw}\\) is a Jensen-Shannon distance, it follows a Chi-square distribution (Menéndez et al. 1997), which is a special case of a Gamma distribution. Furthermore, the mean response is bounded, since any JSD is bounded by \\(1\\) if a base \\(2\\) logarithm is used (Lin 1991). Hence, by Faraway (2016), an inverse link is used for the model, which is of the form \\(y = a+b*\\log(z) + e\\), where \\(y = \\wpdsub{raw}\\), \\(z = (\\nx*\\nf)\\) is the number of groups and \\(e\\) are idiosyncratic errors. Let \\(\\text{E}(y) = \\mu\\) and \\(a + b*\\log(z) = g(\\mu)\\) where \\(g(\\mu)= 1/\\mu\\) and \\(\\hat \\mu = 1/(\\hat a + \\hat b \\log(z))\\). The residuals from this model \\((y-\\hat y) = (y-1/(\\hat a + \\hat b \\log(z)))\\) would be expected to have no dependency on \\(z\\). Thus, \\(\\wpdsub{glm}\\) is defined as the residuals from this model given by \\[\\wpdsub{glm} = \\wpdsub{raw} - 1/(\\hat a + \\hat b*\\log(\\nx*\\nf))\\] The distribution of \\(\\wpdsub{glm}\\) under \\(\\Dnull\\) will have approximately zero mean and a constant variance (not necessarily 1). Combination approach The simulation results (in Section ) show that the distribution of \\(\\wpdsub{glm}\\) under the null design is similar for high \\(\\nx\\) and \\(\\nf\\) (levels higher than \\(5\\)) but less so for lower values of \\(\\nx\\) and \\(\\nf\\). Hence, a combination approach is proposed where we use a permutation approach for categories with small numbers of levels, and a modeling approach for categories with higher numbers of levels. This ensures that the computational load of the permutation approach is alleviated while maintaining a similar null distribution across different categories. This approach, however, requires that the adjusted variables from the two approaches are brought to the same scale. We define \\(\\wpdsub{glm-scaled} = \\wpdsub{glm}*\\sigma^2_{\\text{perm}}/\\sigma^2_{\\text{glm}}\\) as the transformed \\(\\wpdsub{glm}\\) with a similar scale as \\(\\wpdsub{perm}\\). The adjusted measure from the combination approach, denoted by \\(\\wpd\\) is then defined as follows: \\[\\begin{equation} \\wpd = \\begin{cases} \\wpdsub{perm}, &amp; \\text{if $\\nx, \\nf \\le 5$};\\\\ \\wpdsub{glm-scaled} &amp; \\text{otherwise}.\\\\ \\end{cases} \\end{equation}\\] "],["3.3-sec:rank-wpd.html", "3.3 Ranking and selection of cyclic granularities", " 3.3 Ranking and selection of cyclic granularities A cyclic granularity is referred to as “significant” if there is a significant distributional difference of the measured variable between different categories of the harmony. In this section, a selection criterion to choose significant harmonies is provided, thereby eliminating all harmonies that exhibit non-significant differences in the measured variable. The distance measure \\(\\wpd\\) is used as a test statistic to test the null hypothesis that no harmony/cyclic granularity is significant. We select only those harmonies/cyclic granularities for which the test fails. They are then ranked based on how well they capture variation in the measured variable. 3.3.1 Selection A threshold (and consequently a selection criterion) is chosen using the notion of randomization tests (Edgington and Onghena 2007). The data is permuted several times and \\(\\wpd\\) is computed for each of the permuted data sets to obtain the sampling distribution of \\(\\wpd\\) under the null hypothesis. If the null hypothesis is true, then \\(\\wpd\\) obtained from the original data set would be a likely value in the sampling distribution. But in case the null hypothesis is not true, then it is less probable that \\(\\wpd\\) obtained for the original data will be from the same distribution. This idea is utilized to come up with a threshold for selection, denoted by \\(\\wpdsub{threshold}\\), defined as the \\(99^{th}\\) percentile of the sampling distribution. A harmony is selected if the value of \\(\\wpd\\) for that harmony is greater than the chosen threshold. The detailed algorithm for choosing a threshold and selection procedure (for two cyclic granularities) is listed as follows: Input: All harmonies of the form \\(\\{(A, B),~ A = \\{ a_j: j = 1, 2, \\dots, \\nx\\},~ B = \\{ b_k: k = 1, 2, \\dots, \\nf\\}\\}\\), \\(\\forall (A, B) \\in H_{N_C}\\). Output: Harmony pairs \\((A, B)\\) for which \\(\\wpd\\) is significant. For each harmony pair \\((A, B) \\in H_{N_C}\\), the following steps are taken. Given the measured variable; \\(\\{v_t: t=0, 1, 2, \\dots, T-1\\}\\), \\(\\wpd\\) is computed and is represented by \\(\\wpd^{A, B}_{obs}\\). For \\(i=1,\\dots,m\\), randomly permute the original time series: \\(\\{v_t^{i}: t=0, 1, 2, \\dots, T-1\\}\\) and compute \\(\\wpd^{A, B}_{i}\\) from \\(\\{v_t^{i}\\}\\). Define \\(\\wpdsub{sample} = \\{\\wpd^{A, B}_{1}, \\dots, \\wpd^{A, B}_{M}\\}\\). Stack the \\(\\wpdsub{sample}\\) vectors as \\(\\wpdsub{sample}^{\\text{all}}\\) and compute its \\(p = 100(1-\\alpha)\\) percentiles as \\(\\wpdsub{threshold\\emph{p}}\\). If \\(\\wpd^{A, B}_{obs} &gt; \\wpdsub{threshold\\emph{p}}\\), harmony pair \\((A, B)\\) is selected at the \\(1-p/100\\) level, otherwise rejected. Harmonies selected using the \\(99^{th}\\), \\(95^{th}\\) and \\(90^{th}\\) thresholds are tagged as ***, **, * respectively. 3.3.2 Ranking The distribution of \\(\\wpd\\) is expected to be similar for all harmonies under the null hypothesis, since they have been adjusted for different number of categories for the harmonies or underlying distribution of the measured variable. Hence, the values of \\(\\wpd\\) for different harmonies are comparable and can be used to rank the significant harmonies. A higher value of \\(\\wpd\\) for a harmony indicates that higher maximum variation in the measured variable is captured through that harmony. Figure also presents the results of \\(\\wpd\\) from the illustrative designs in Section . The value of \\(\\wpd\\) under null design (a) is the least, followed by (b), (c) and (d). This aligns with the principle of \\(\\wpd\\), which is expected to have lowest value for null designs and highest for designs of the form \\(\\Dfx\\) (d). Moreover, note the relative differences in \\(\\wpd\\) values between (b) and (c). The value of the tuning parameter \\(\\lambda\\) is set to 2/3, which gives greater emphasis to differences in x-axis categories than facets. Again consider (a) and (b) with a \\(\\wpd\\) value of 20.5 and 145 respectively. This is because there is a more gradual increase across hours of the day than across months of the year. If the order of categories is ignored, the resulting \\(\\wpd\\) values are \\(97.8\\) and \\(161\\) respectively, because differences between any hours of the day tend to be larger than differences only between consecutive hours. Similarly, Figures (a) and (b) have \\(\\wpd\\) values of \\(110.79\\) and \\(125.82\\) respectively. The ranking implies that the distributional differences are more prominent for the second household, as is also seen from the bigger fluctuations in the \\(90^{th}\\) percentile than for the first household. 3.3.3 Simulations Simulations were carried out to explore the behavior of \\(\\wpd\\) as \\(\\nx\\) and \\(\\nf\\) were varied, in order to compare and evaluate different normalization approaches. More detailed simulation results, including an exploration of the size and power of the proposed test, are contained in the supplements. Simulation design \\(m=1\\) Observations were generated from a N(0,1) distribution for \\(\\nx \\in \\{2, 3, 5, 7, 9, 14, 17, 20, 24, 31, 42, 50\\}\\), with \\(\\nsub{times} = 500\\) observations drawn for each combination of categories. This design corresponds to \\(\\Dnull\\). For each of the categories, there were \\(\\nsub{sim}=200\\) replications, so that the distribution of \\(\\wpd\\) under \\(\\Dnull\\) could be observed. Let \\(\\wpd_{\\ell, s}\\) denote the value of \\(\\wpd\\) obtained for the \\(\\ell^{th}\\) panel and \\(s^{th}\\) simulation. \\(m=2\\) Similarly, observations were generated from a N(0,1) distribution for each combination of \\(\\nx\\) and \\(\\nf\\) from \\(\\{2, 3, 5, 7, 14, 20, 31, 50\\}\\), with \\(\\nsub{times} = 500\\) observations drawn for each of the \\(64\\) combinations. Results Figure shows that both the location and scale of the distributions change across panels. This is not desirable under \\(\\Dnull\\) as it would mean comparisons of \\(\\wpd\\) values are not appropriate across different \\(\\nx\\) and \\(\\nf\\) values. Table gives the summary of a Gamma generalized linear model to capture the relationship between \\(\\wpdsub{raw}\\) and the number of comparisons. The intercepts and slopes are similar, independent of the underlying distributions (see supplementary paper for details) and hence the coefficients are shown for the case when observations are drawn from a N(0,1) distribution. Figure shows the distribution of \\(\\wpdsub{perm}\\) and \\(\\wpdsub{glm-scaled}\\) on the same scale to show that a combination approach could be used for higher values of \\(\\nx\\) and \\(\\nf\\) to alleviate the computational time of the permutation approach. Figure 3.5: Distribution of \\(\\wpdsub{raw}\\) is plotted across different \\(\\nx\\) and \\(\\nf\\) categories under \\(\\Dnull\\) through density and rug plots. Both location (blue line) and scale (orange marks) of the distribution shifts for different panels. This is not desirable since under the null design, the distribution is not expected to capture any differences. Table 3.1: Results of generalised linear model to capture the relationship between \\(\\wpdsub{raw}\\) and the number of comparisons. \\(m\\) term estimate std.error statistic p.value 1 Intercept 26.09 0.54 48.33 0 1 \\(\\log(\\nx \\times \\nf)\\) -1.87 0.19 -9.89 0 2 Intercept 23.40 0.22 104.14 0 2 \\(\\log(\\nx \\times \\nf)\\) -0.96 0.04 -21.75 0 Figure 3.6: The distribution of \\(\\wpdsub{perm}\\) and \\(\\wpdsub{glm-scaled}\\) are overlaid to compare the location and scale across different \\(\\nx\\) and \\(\\nf\\). \\(\\wpdsub{norm}\\) takes the value of \\(\\wpdsub{perm}\\) for lower levels, and \\(\\wpdsub{glm-scaled}\\) for higher levels to to alleviate the problem of computational time in permutation approaches. This is possible as the distribution of the adjusted measure looks similar for both approaches for higher levels. These results justify our use of the permutation approach when \\(\\nx&lt;5\\) and \\(\\nf&lt;5\\), and the use of the GLM otherwise. "],["3.4-sec:application-wpd.html", "3.4 Application to residential smart meter dataset", " 3.4 Application to residential smart meter dataset The smart meter data set for eight households in Melbourne were procured by downloading the data from the energy supplier/retailer. The data has been cleaned to form a tsibble (Wang, Cook, and Hyndman 2020a) containing half-hourly electricity consumption from July to December 2019 for each of the households. No behavioral pattern is likely to be discerned from the time plot of energy usage over the entire period, since the plot will have too many observations squeezed in a linear representation. When we zoom into the September 2019 data in Figure (b), some patterns are visible in terms of peaks and troughs, but we do not know if they are regular or what is their period. Figure 3.7: An ensemble plot with a heatmap (a), line plot (b), parallel coordinate plot (c) to demonstrate energy behavior of the households in different ways. Panel (b) shows the raw demand series for September to highlight the repetitive patterns of energy demand. Panel (a) shows \\(\\wpd\\) values across harmonies where a darker color indicates a higher ranking harmony. A significant harmony is shown with an asterisk. For example, ids 7 and 8 have significant patterns across (hod, dow) and (dow, hod). Panel (c) is useful for comparing households across harmonies. For example, for the harmony (dow-hod), ids 1 and 7 have the least and highest \\(\\wpd\\) respectively. Electricity demand, in general, has daily, weekly and annual seasonal patterns. However, it is not apparent from this view if all households have those patterns, or how strong they are in each case. It is also not clear from this view if any other periodic patterns are present in any household. We start the analysis by choosing a few harmonies, and ranking them for each of these households. The ranking and selection of significant harmonies is validated by analyzing the distribution of energy usage across significant harmonies. Choosing cyclic granularities of interest and removing clashes Let \\(v_{i, t}\\) denote the electricity demand for the \\(i^{th}\\) household in time period \\(t\\). The series \\(\\{v_{i, 1},\\dots,v_{i,T}\\}\\) is the linear granularity corresponding to half-hour since the interval of the tsibble is 30 minutes. We consider coarser linear granularities like hour, day, week and month from the commonly used Gregorian calendar. From the four linear granularities of hour, day, week, and month, we obtain \\(N_C = 4\\times 3/2 = 6\\) cyclic granularities: “hour_day,” “hour_week,” “hour_month,” “day_ week,” “day_month” and “week_month.” Further, we add cyclic granularity day-type (“wknd wday”) to capture weekend and weekday behavior. Thus, seven cyclic granularities are considered to be of interest. The pairs of cyclic granularities (\\(C_{N_C}\\)) will have \\(7\\times 6=42\\) elements. The set of possible harmonies \\(H_{N_C}\\) from \\(C_{N_C}\\) are chosen by removing clashes using procedures described in (Gupta et al. 2021). Table shows \\(14\\) harmony pairs that belong to \\(H_{N_C}\\). Table 3.2: Ranking of harmonies for the eight households with significance marked for different thresholds. Rankings are different and at most three harmonies are significant for any household. The number of harmonies to explore are reduced from 42 to 3. facet variable x variable id 1 id 2 id 3 id 4 id 5 id 6 id 7 id 8 hod wdwnd 1 2 1 2 3 1 3 3 dom hod 2 4 3 3 4 3 4 6 wdwnd hod 3 10 7 7 6 8 8 10 hod wom 4 9 6 5 5 5 5 5 wom wdwnd 5 14 14 10 12 9 12 13 hod dow 6 1 2 1 1 2 2 1 wdwnd wom 7 12 13 8 7 7 10 12 dow hod 8 3 4 4 2 4 1 2 hod dom 9 7 10 13 10 10 9 4 wom dow 10 6 8 9 8 6 7 9 dow wom 11 5 9 11 11 12 6 7 wom hod 12 8 5 6 9 11 11 8 dom wdwnd 13 13 11 12 14 14 14 14 wdwnd dom 14 11 12 14 13 13 13 11 Selecting and Ranking harmonies for all households \\(\\wpd_{i}\\) is computed on \\(v_{i, t}\\) for all harmony pairs \\(\\in H_{N_C}\\) and for each household \\(i \\in \\{1, 2, \\dots, 8\\}\\). The harmony pairs are then arranged in descending order and highlighted with ***, ** and * corresponding to the \\(99^{th}\\), \\(95^{th}\\) and \\(90^{th}\\) percentile threshold. Table shows the rank of the harmonies for different households. The rankings are different for different households, which is a reflection of their varied behaviors. Most importantly, there are at most three harmonies that are significant for any household. This is a huge reduction in the number of potential harmonies to explore. Detecting patterns not apparent from linear display Figure helps to compare households through the heatmap (a) across harmony pairs. Here dom, dow, wdwnd are abbreviations for day-of-month, day-of-week, weekday/weekend and so on. The colors represent the value of \\(\\wpd\\). Darker cells correspond to higher values of \\(\\wpd\\). Those with * correspond to \\(\\wpd\\) values above \\(\\wpdsub{threshold95}\\). We can now see some patterns that were not discernible in Panel (b), including: id 7 and 8 have the same significant harmonies despite having very different total energy usage. id 6 and 7 differ in the sense that for id 6, the difference in patterns only during weekday/weekends, whereas for id 7, all or few other days of the week are also important. This might be due to their flexible work routines or different day-off. There are no significant periodic patterns for id 5 when we fix the threshold to \\(\\wpdsub{threshold95}\\). Note that the \\(\\wpd\\) values are computed over the entire range, but the linear display in (b) is only for September, with the major and minor x-axis corresponding to weeks and days respectively. Comparing households and validating rank of harmonies According to Figure (c), for the harmony pair (dow-hod), household id 7 has the greatest value of \\(\\wpd\\), while id 1 has the least. From Table it can be seen that the harmony pair (dow, hod) is important for id 7, however it has been labeled as an inconsequential pair for id 1. The distribution of energy demand for both of these households, with dow as the facet and hod on the x-axis, may help explain the choice. Figure demonstrates that for id 7, the median (black) and quartile deviation (orange) of energy consumption fluctuates for most hours of the day and days of the week, while for id 1, daily patterns are more consistent within weekdays and weekends. As a result, for id 1, it is more appropriate to examine the distributional difference solely across (dow, wdwnd), which has been rated higher in Table . Figure 3.8: Comparing distribution of energy demand shown for household id 1 (a) and 7 (b) across hod in x-axis and dow in facets through quantile area plots. The value of \\(\\wpd\\) in Table 3 suggests that the harmony pair (dow, hod) is significant for household id 7, but not for id 1. This implies that distributional differences are captured more by this harmony for id 7, which is apparent from this display with more fluctuations across median and 75th percentile for different hours of the day and day of week. For id 1, patterns look similar within weekdays and weekends. Here, the median is represented by the black line, the orange area corresponds to quartile deviation and the green area corresponds to area between \\(10^{th}\\) and \\(90^{th}\\) quantile. "],["3.5-discussion.html", "3.5 Discussion", " 3.5 Discussion Exploratory data analysis involves many iterations of finding and summarizing patterns. With temporal data available at finer scales, exploring time series has become overwhelming with so many possible granularities to explore. A common solution is to aggregate and look at the patterns across the usual granularities such as hour-of-day or day-of-week, but there is no way to know the “interesting” granularities a priori. A huge number of displays need to be analyzed or we might end up missing informative granularities. This work refines the search of informative granularities by identifying those for which the differences between the displayed distributions are greatest and rating them in order of importance of capturing maximum variation. The significant granularities across different datasets (individuals/subjects) do not imply similar patterns across different datasets. They simply mean that maximum distributional differences are being captured across those granularities. A future direction of work is to be able to explore and compare many individuals/subjects together for similar patterns across significant granularities. "],["acknowledgments.html", "Acknowledgments", " Acknowledgments The authors thank the ARC Centre of Excellence for Mathematical and Statistical Frontiers (ACEMS) for supporting this research. Sayani Gupta was partially funded by Data61 CSIRO during her PhD. The Github repository, github.com/Sayani07/paper-hakear, contains all materials required to reproduce this article and the code is also available online in the supplemental materials. This article was created with R (R Core Team 2021), knitr (Xie 2015), (Xie 2020) and rmarkdown (Xie, Allaire, and Grolemund 2018), (Allaire et al. 2020). Graphics are produced with ggplot2 (Wickham 2016). "],["3.6-supplementary-materials.html", "3.6 Supplementary Materials", " 3.6 Supplementary Materials Data and scripts: Data sets and R code to reproduce all figures in this article (main.R). Simulation results and scripts: All simulation table, graphics and and R code to reproduce it (paper-supplementary.pdf, paper-supplementary.Rmd) R-package: The open-source R package hakear is available on Github (https://github.com/Sayani07/hakear) to implement ideas presented in this paper. "],["4-ch-gracsr.html", "Chapter 4 Clustering time series based on probability distributions across temporal granularities", " Chapter 4 Clustering time series based on probability distributions across temporal granularities With more and more time series data being collected at much finer temporal resolution, for a longer length of time, and for a larger number of individuals/entities, time series clustering research is getting a lot of traction. Long, noisy, patchy, uneven, and asynchronous time series are common in many fields, limiting similarity searches or lowering method efficiency when clustering is based on a distance metric. In this work, we suggest two approaches for obtaining similarity between time series based on probability distributions over cyclic temporal granularities for distance-based clustering approaches. Cyclic granularities like hour-of-the-day, work-day/weekend, month-of-the-year and so on, are useful for finding repeated patterns in the data. Looking at probability distributions across cyclic granularities serves two purposes: (a) “Probability distributions” characterize the inherent temporal data structure of these large unequal-length time series and are robust to missing or noisy data. (b) Using probability distributions over “cyclic granularities” ensures small pockets of similar “repeated” behaviors. Our method is capable of producing useful clusters, as demonstrated by testing on validation data designs and a sample of residential smart meter consumers. "],["4.1-introduction-2.html", "4.1 Introduction", " 4.1 Introduction Time-series clustering is the process of unsupervised partitioning of \\(n\\) time-series data into \\(k\\) (\\(k&lt;n\\)) meaningful groups such that homogeneous time-series are grouped together based on a certain similarity measure. The time-series features, length of time-series, representation technique, and, of course, the purpose of clustering time-series all influence the suitable similarity measure or distance metric to a meaningful level. The three primary methods to time series clustering (Liao (2005)) are algorithms that operate directly with distances or raw data points in the time or frequency domain (distance-based), with features derived from raw data (feature-based), or indirectly with models constructed from raw data (model-based). The efficacy of distance-based techniques is highly dependent on the distance measure utilized. Defining an appropriate distance measure for the raw time series may be a difficult task since it must take into account noise, variable lengths of time series, asynchronous time series, different scales, and missing data. Commonly used Distance-based similarity measures as suggested by a decade review of time series clustering approaches (Aghabozorgi, Seyed Shirkhorshidi, and Ying Wah (2015)) are Euclidean, Pearson’s correlation coefficient and related distances, Dynamic Time Warping, Autocorrelation, Short time series distance, Piecewise regularization, cross-correlation between time series, or a symmetric version of the Kullback–Liebler distances (Liao (2007)) but on a vector time series data. Among these alternatives, Euclidean distances have high performance but need the same length of data over the same period, resulting in information loss regardless of whether it is on raw data or a smaller collection of features. DTW works well with time series of different lengths (Corradini (2001)), but it is incapable of handling missing observations. Surprisingly, probability distributions, which may reflect the inherent temporal structure of a time series have not been considered in determining time series similarity. We consider the problem of clustering a large number of univariate time series of continuous values which are available at fine temporal scales, being motivated by the residential smart meter data. These time series data are long (with more and more data collected at finer resolutions), are asynchronous, with varying time lengths for different houses and missing observations and characterized by noisy and patchy behavior that can quickly become overwhelming and hard to interpret, requiring summarizing the large number of customers into pockets of similar energy behavior. Choosing probability distributions seem to be a natural way to analyze these types of data sets since they are robust to uneven length, missing data, or noise. This paper proposes two approaches for obtaining pairwise similarities based on Jensen-Shannon distances between probability distributions across significant cyclic granularities. Cyclic temporal granularities (Gupta, Hyndman, and Cook 2021), which are temporal deconstructions of a time period into units such as hour-of-the-day, work-day/weekend, can be useful for measuring repetitive patterns in large univariate time series data. The resulting clusters are expected to group customers that have similar repetitive behaviors across each of the interesting cyclic granularities. Below are some of the benefits of our method: When using probability distributions, data does not have to be the same length or observed during the exact same time period (unless there is a structural pattern); Jensen-Shannon distances evaluate the distance between two distributions rather than raw data, which is less sensitive to missing observations and outliers than other conventional distance methods; While most clustering algorithms produce clusters similar across just one temporal granularity, this technique takes a broader approach to the problem, attempting to group observations with similar distributions across all interesting cyclic granularities; It is reasonable to define a time series based on its degree of trend and seasonality, and to take these characteristics into account while clustering it. The modification of the data structure by taking into account probability distributions across cyclic granularities assures that there is no trend and that seasonal variations are handled independently. As a result, there is no need to de-trend or de-seasonalize the data before applying the clustering method. For similar reasons, there is no need to exclude holiday or weekend routines. Background and motivation Large spatio-temporal data sets, both from open and administrative sources, offer up a world of possibilities for research. One such data sets for Australia is the Smart Grid, Smart City (SGSC) project (2010–2014) available through Department of the Environment and Energy The project provides half-hourly data of over 13,000 household electricity smart meters distributed unevenly from October 2011 to March 2014. Larger data sets include greater uncertainty about customer behavior due to growing variety of customers. Households vary in size, location, and amenities such as solar panels, central heating, and air conditioning. The behavioral patterns differ amongst customers due to many temporal dependencies. Some households use a dryer, while others dry their clothes on a line. Their weekly profile may reflect this. They may vary monthly, with some customers using more air conditioners or heaters than others, while having equivalent electrical equipment and weather circumstances. Some customers are night owls, while others are morning larks. Day-off energy use varies depending on whether customers stay home or go outside. Age, lifestyle, family composition, building attributes, weather, availability of diverse electrical equipment, among other factors, make the task of properly segmenting customers into comparable energy behavior a fascinating one. This challenge is worsened when all we know about our consumers is their energy use history (Ushakova and Jankin Mikhaylov (2020)). To safeguard the customers’ privacy, it is probable that such information is not accessible. Also, energy suppliers may not always update client information, such as property features, in a timely manner. Thus, there is a growing need to have research that examines how much energy usage heterogeneity can be found in smart meter data and what are some of the most common power consumption patterns, rather than explaining why consumption differs. Related work A multitude of papers have emerged around smart meter time series clustering for deepening our knowledge of consumption patterns. Tureczek and Nielsen (2017) conducted a systematic study of over \\(2100\\) peer-reviewed papers on smart meter data analytics. None of the \\(34\\) articles chosen for their emphasis use Australian smart meter data. The most often used algorithm is K-Means. Using K-Means without considering time series structure or correlation results in inefficient clusters. Principal Component Analysis (PCA) or Self-Organizing Maps (SOM) eliminate correlation patterns and decrease feature space, but lose interpretability. To reduce dimensionality, several studies use principal component analysis or factor analysis to pre-process smart-meter data before clustering (Ndiaye and Gabriel (2011)). Other algorithms utilized in the literature include k-means variants, hierarchical approaches, and greedy k-medoids. Time series data, such as smart meter data, are not well-suited to any of the techniques mentioned in Tureczek and Nielsen (2017). Only one study (Ozawa, Furusato, and Yoshida 2016) identified time series characteristics using Fourier transformation, which converts data from time to frequency and then uses K-Means to cluster by greatest frequency. Motlagh, Berry, and O’Neil (2019) suggests that the time feature extraction is limited by the type of noisy, patchy, and unequal time-series common in residential and addresses model-based clustering by transforming the series into other other objects such as structure or set of parameters which can be more easily characterized and clustered. (Chicco and Akilimali 2010) addresses information theory-based clustering such as Shannon or Renyi entropy and its variations. Melnykov (2013) discusses how outliers, noisy observations and scattered observations can complicate estimating mixture model parameters and hence the partitions. To our knowledge, none of the methods focus on exploring heterogeneity in repetitive behaviors based on the dynamics of multiple temporal dependencies using probability distributions. The remainder of the paper is organized as follows: Section  provides the clustering methodology. Section  shows data designs to validate our methods. Section  discusses the application of the method to a subset of the real data. Finally, we summarize our results and discuss possible future directions in Section . "],["4.2-sec:methodology.html", "4.2 Clustering methodology", " 4.2 Clustering methodology The foundation of our method is unsupervised clustering algorithms based exclusively on the time-series data. The proposed methodology aims to leverage the intrinsic data structure hidden within cyclic temporal granularities. The existing work on clustering probability distributions assumes we have an iid sample \\(f_1(v),\\dots,f_n(v)\\), where \\(f_i(v)\\) denotes the distribution from observation \\(i\\) over some random variable \\(v = \\{v_t: t = 0, 1, 2, \\dots, T-1\\}\\) observed across \\(T\\) time points. In this work, instead of considering the probability distributions of the linear time series, we assume it across different categories of any cyclic granularity. We can consider categories of an individual cyclic granularity (\\(A\\)) or combination of categories for two interacting granularities (\\(A*B\\)) to have a distribution, where \\(A, B\\) are defined as \\(A = \\{a_j: j=1, 2, \\dots J\\}\\) and \\(B = \\{b_k: k = 1, 2, \\dots K\\}\\). For example, let us consider two cyclic granularities \\(A\\) and \\(B\\) representing hour-of-day and day-of-week. Then \\(A = \\{0, 1, 2, \\dots, 23\\}\\) and \\(B = \\{Mon, Tue, Wed, \\dots, Sun\\}\\). In case individual granularities are considered, there are \\(J = 24\\) distributions of the form \\(f_{i,j}(v)\\) or \\(K = 7\\) distributions of the form \\(f_{i,k}(v)\\) for each customer \\(i\\). In case of interaction, \\(J*K=168\\) distributions of the form \\(f_{i,j, k}(v)\\) could be conceived for each customer \\(i\\). Hence clustering these customers is equivalent to clustering these collections of conditional univariate probability distributions. Towards this goal, we need to decide how to measure similarities between collections of univariate probability distributions. There are multiple ways to measure similarities depending on the aim of the analysis. This paper considers a two approaches for finding distances between time series. Both of these approaches may be useful in a practical context and, depending on the data set, may or may not propose the same customer classification. The obtained distances could be fed into a clustering algorithm to break large data sets into subgroups that can then be analyzed separately. The methodology is explained in the Figure and each element of the pipeline is discussed. Figure 4.1: Flow chart illustrating the pipeline for methodology Find significant granularities or harmonies (Gupta, Hyndman, and Cook 2021) proposes a method for choosing significant cyclic granularities and harmonies (interacting granularities that can be studied together) (Gupta et al. 2021), which is used in this work. We define “significant” granularities as those with significant distributional differences across categories. It is preferable to consider those since it is more probable that there will be some intriguing repeated behavior worth investigating. It should be noted that all of the observations in the study may not have the same set of important granularities. The following is a method for generating a list (\\(S_c\\)) of significant granularities for all observations: Remove granularities from the comprehensive list that are insignificant for all observations. select only the granularities that are significant for the majority of observations. There will be observations in both cases where one or a few selected granularities are boring. Even in that case, having this group of observations with no interesting patterns at a granularity that regularly discovers patterns may be valuable. If, on the other hand, the granularities under examination are truly important for a group of data, unique patterns may be identified while clustering them. Data transformation Observations often have a somewhat skewed time series distribution and their ranges might vary greatly. Statistical transformations are employed to bring all of them to the same range or normalize each observation. This is important because we are not interested in trivial clusters that vary in magnitudes, but rather in uncovering comparable patterns of distributional differences between categories. For the JS-based approaches, two data transformation techniques are utilized viz, Normal-Quantile Transform (NQT) and Robust scaling. NQT is a built-in transformation for computing \\(wpd\\), which is the foundation of wpd-based distances. Robust scaling The normalized \\(i^{th}\\) observation is denoted by \\(v_{norm} = \\frac{v_t - q_{0.5}}{q_{0.75}-q_{0.25}}\\), where \\(v_t\\) is the actual value at the \\(t^{th}\\) time point and \\(q_{0.25}\\), \\(q_{0.5}\\) and \\(q_{0.75}\\) are the \\(25^{th}\\), \\(50^{th}\\) and \\(75^{th}\\) percentile of the time series for the \\(i^{th}\\) observation. \\(v_{norm}\\) has zero mean and median, as well as a standard deviation of one, with the outliers having same relative connections to other values. Normal-Quantile transform The raw data for all observations is individually normal-quantile transformed (NQT) (Krzysztofowicz 1997), so that the transformed data follows a standard normal distribution. NQT will make the skewed distributions bell-shaped. As a result, determining which raw distribution was used is difficult using the modified distribution. Multimodality is also concealed or reversed. As a result, while displaying transformed data using NQT, one must exercise caution. But NQT is a useful transformation that often improves clustering performance. Data pre-preprocessing We start with a “tsibble” (Wang, Cook, and Hyndman (2020a)) data structure with an index variable representing inherent ordering from past to present and a key variable that defines observational units over time. The measured variable for an observation is a time-indexed sequence of values. This sequence, however, could be shown in several ways. A shuffle of the raw sequence may represent hourly consumption throughout a day, a week, or a year. Cyclic granularities can be expressed in terms of the index set in the “tsibble” data structure. But the data structure changes while transporting from linear to cyclic scale of time as multiple observations now correspond to each category and induce a probability distribution. Directly computing Jensen-Shannon distances between the entire probability distributions can be very costly. Hence, in this paper, quantiles are chosen to characterize the probability distributions. So, in the final data structure, each category of a cyclic granularity corresponds to a list of numbers which is essentially a few chosen quantiles. Distance metrics The total (dis) similarity between each pair of customers is obtained by combining the distances between the collections of conditional distributions. This needs to be done in a way such that the resulting metric is a distance metric, and could be fed into the clustering algorithm. Two types of distance metric is considered: JS-based distances This distance metric considers two time series to be similar if the distributions of each category of an individual cyclic granularity or combination of categories for interacting cyclic granularities are similar. In this study, the distribution for each category is characterized using deciles (can potentially consider any list of quantiles), and the distances between distributions are calculated using the Jensen-Shannon distances (Menéndez et al. (1997)), which are symmetric and thus could be used as a distance measure. The sum of the distances between two observations \\(x\\) and \\(y\\) in terms of cyclic granularity \\(A\\) is defined as \\[S^A_{x,y} = \\sum_{j} D_{x,y}(A)\\] (sum of distances between each category \\(j\\) of cyclic granularity \\(A\\)) or \\[S^{A*B}_{x,y} = \\sum_j \\sum_k D_{x,y}(A, B)\\] (sum of distances between each combination of categories \\((j, k)\\) of the harmony \\((A, B)\\). After determining the distance between two series in terms of one granularity, we must combine them to produce a distance based on all significant granularities. When combining distances from individual \\(L\\) cyclic granularities \\(C_l\\) with \\(n_l\\) levels, \\[S_{x, y} = \\sum_lS^{C_l}_{x,y}/n_l\\] is employed, which is also a distance metric since it is the sum of JS distances. This approach is expected to yield groups, such that the variation in observations within each group is in magnitude rather than distributional pattern, while the variation between groups is only in distributional pattern across categories. wpd-based distances Compute weighted pairwise distances \\(wpd\\) (Gupta, Hyndman, and Cook (2021)) for all considered granularities for all observations. \\(wpd\\) is designed to capture the maximum variation in the measured variable explained by an individual cyclic granularity or their interaction and is estimated by the maximum pairwise distances between consecutive categories normalized by appropriate parameters. A higher value of \\(wpd\\) indicates that some interesting pattern is expected, whereas a lower value would indicate otherwise. Once we have chosen \\(wpd\\) as a relevant feature for characterizing the distributions across one cyclic granularity, we have to decide how we combine differences between the multiple features (corresponding to multiple granularities) into a single number. The Euclidean distance between them is chosen, with the granularities acting as variables and \\(wpd\\) representing the value under each variable. With this approach, we should expect the observations with similar \\(wpd\\) values to be clustered together. Thus, this approach is useful for grouping observations that have a similar significance of patterns across different granularities. Similar significance does not imply a similar pattern, which is where this technique varies from JS-based distances, which detect differences in patterns across categories. Clustering algorithm With a way to obtain pairwise distances, any clustering algorithm can be employed that supports the given distance metric as input. A good comprehensive list of algorithms can be found in Xu and Tian (2015) based on traditional ways like partition, hierarchy, or more recent approaches like distribution, density, and others. We employ agglomerative hierarchical clustering in conjunction with Ward’s linkage. Hierarchical cluster techniques fuse neighboring points sequentially to form bigger clusters, beginning with a full pairwise distance matrix. The distance between clusters is described using a “linkage technique.” This agglomerative approach successively merges the pair of clusters with the shortest between-cluster distance using Ward’s linkage method. Characterization of clusters Cluster characterization is an important element of cluster analysis. Cook and Swayne (2007) provides several methods for characterizing clusters. Parallel coordinate plots (Wegman (1990)), Scatterplot matrix, Displaying cluster statistics (Dasu, Swayne, and Poole (2005)), MDS (Borg and Groenen (2005)), PCA, t-SNE(Krijthe (2015)), Tour (Wickham et al. (2011)) are some of the graphical approaches used in this study. A Parallel Coordinates Plot features parallel axes for each variable and each axis is linked by lines. Changing the axes may reveal patterns or relationships between variables for categorical variables. However, for categories with cyclic temporal granularities, preserving the underlying ordering of time is more desirable. Displaying cluster statistics is useful when we have larger problems and it is difficult to read the parallel coordinate plots due to congestion. All of MDS, PCA and t-SNE use a distance or dissimilarity matrix to construct a reduced-dimension space representation, their goals are diverse. Multidimensional scaling (Borg and Groenen (2005)) seeks to maintain the distances between pairs of data points, with an emphasis on pairings of distant points in the original space. The t-SNE embedding will compress data points that are close in high-dimensional space. Tour is a collection of interpolated linear projections of multivariate data into lower-dimensional space. The cluster characterization approach varies depending on the distance metric used. Parallel coordinate plots, scatter plot matrices, MDS or PCA are potentially useful ways to characterize clusters using wpd-based distances. For JS-based distances, plotting cluster statistics is beneficial for characterization and variable importance could be displayed through parallel coordinate plots. "],["4.3-sec:validation.html", "4.3 Validation", " 4.3 Validation To validate our clustering methods, we spiked many attributes in the data to create different data designs. Three circular granularities \\(g1\\), \\(g2\\) and \\(g3\\) are considered with categories denoted by \\(\\{g10,g11\\}\\), \\(\\{g20, g21, g22\\}\\) and \\(\\{g30, g31, g32, g33, g34\\}\\) and levels \\(n_{g_1}=2\\), \\(n_{g_2}=3\\) and \\(n_{g_3}=5\\). These categories could be integers or some more meaningful labels. For example, the granularity “day-of-week” could be either represented by \\(\\{0, 1, 2, \\dots, 6\\}\\) or \\(\\{Mon, Tue, \\dots, Sun\\}\\). Here categories of \\(g1\\), \\(g2\\) and \\(g3\\) are represented by \\(\\{0, 1\\}\\), \\(\\{0, 1, 2\\}\\) and \\(\\{0, 1, 2, 3, 4\\}\\) respectively. A continuous measured variable \\(v\\) of length \\(T\\) indexed by \\(\\{0, 1, \\dots T-1\\}\\) is simulated such that it follows the structure across \\(g1\\), \\(g2\\) and \\(g3\\). We constructed independent replications of all data designs \\(R = \\{25, 250, 500\\}\\) to investigate if our proposed clustering method can discover distinct designs in small, medium, and big number of series. All designs employ \\(T=\\{300, 1000, 5000\\}\\) sample sizes to evaluate small, medium, and large-sized series. Variations in method performance may be due to different jumps between categories. So a mean difference of \\(\\mu = \\{1, 2, 5\\}\\) between categories is considered. The performance of the approaches varies with the number of granularities which has interesting patterns across its categories. So three scenarios are considered to accommodate that. 4.3.1 Data generating processes Each category or combination of categories from \\(g1\\), \\(g2\\) and \\(g3\\) are assumed to come from the same distribution, a subset of them from the same distribution, a subset of them from separate distributions, or all from different distributions, resulting in various data designs. As the methods ignore the linear progression of time, there is little value in adding time dependency to the data generating process. The data type is set to be “continuous,” and the setup is assumed to be Gaussian. When the distribution of a granularity is “fixed,” it means distributions across categories do not vary and are considered to be from N (0,1). \\(\\mu\\) alters in the “varying” designs, leading to varying distributions across categories. 4.3.2 Data designs 4.3.2.1 Individual granularities Scenario (a): All significant granularities Consider the instance where \\(g1\\), \\(g2\\), and \\(g3\\) all contribute to design distinction. This means that each granularity will have significantly different patterns at least across one of the designs to be clustered. In Table various distributions across categories are considered (top) which lead to different designs (bottom). Figure shows the simulated variable’s linear (left) and cyclic (right) representations for each of these five designs. The structural difference in the time series variable is impossible to discern from the linear view, with all of them looking very similar. The shift in structure may be seen clearly in the distribution of cyclic granularities. The following scenarios use solely graphical displays across cyclic granularities to highlight distributional differences in categories. Scenario (b): Few significant granularities This is the case where one granularity will remain the same across all designs. We consider the case where the distribution of \\(v\\) varies across \\(g2\\) levels for all designs, across \\(g3\\) levels for a few designs, and \\(g1\\) does not vary across designs. The proposed design is shown in Figure (b). Scenario (c): One significant granularity Only one granularity is responsible for identifying the designs in this case. This is depicted in Figure (right) where only \\(g3\\) affects the designs significantly. Table 4.1: For Scenario (a), distributions of different categories when they vary (top). If distributions are fixed, they are set to N(0, 1). 5 designs resulting from different distributions across categories (below) granularity Varying distributions g1 g10 ~ N(0, 1), g11 ~ N(2, 1) g2 g21 ~ N(2, 1), g22 ~ N(1, 1), g23 ~ N(0, 1) g3 g31 ~ N(0, 1), g32 ~ N(1, 1), g33 ~ N(2, 1), g34 ~ N(1, 1), g35 ~ N(0, 1) design g1 g2 g3 design-1 fixed fixed fixed design-2 vary fixed fixed design-3 fixed vary fixed design-4 fixed fixed vary design-5 vary vary vary Figure 4.2: The linear (left) and cyclic (right) representation of the simulated variable is shown. Each row represents a design in Scenario (a). In this scenario, all of \\(g1\\), \\(g2\\) and \\(g3\\) changes across at least one design. Also, it is not possible to comprehend these differences in patterns just by looking at or considering the linear representation. Figure 4.3: Plots (b) and (c) correspond to Design (b) and (c) respectively. In (b) \\(g2\\), \\(g3\\) changes across atleast one design but \\(g1\\) remains constant. Only \\(g3\\) changes across different designs in (c). 4.3.2.2 Interaction of granularities The proposed methods could be extended when two granularities of interest interact and we want to group subjects based on the interaction of the two granularities. Consider a group that has a different weekday and weekend behavior in the summer but not in the winter. This type of combined behavior across granularities can be discovered by evaluating the distribution across combinations of categories for different interacting granularities (Weekend/Weekday and month-of-year in this example). As a result, in this scenario, we analyze a combination of categories generated from different distributions. Consider a case in which there are only two interacting granularities of interest, \\(g1\\) and \\(g2\\). In contrast to the previous situation, when we could study distributions across \\(n_{g_1} + n_{g_2} = 5\\) separate categories, with interaction, we must evaluate the distribution of the \\(n_{g_1}*n_{g_2}=6\\) combination of categories. Consider the \\(4\\) designs in Figure , where various distributions are assumed for different combinations of categories, resulting in different designs. Design \\(D1\\) exhibits no change in distributions across \\(g1\\) or \\(g2\\), whereas Designs \\(D2\\) and \\(D3\\) alter across only \\(g1\\) and \\(g2\\), respectively. D4 varies across both \\(g1\\) and \\(g2\\) categories. D3 and D4 appear similar based on their relative differences across consecutive categories, but \\(D4\\) also changes across facets, unlike \\(D3\\), which has all facets look the same. Figure 4.4: Distribution of the simulated variable across \\(g1\\) conditional on \\(g2\\) is shown through boxplots for 4 designs. D1 has no change in distributions across different categories of \\(g1\\) or \\(g2\\), while D2 and D3 change across only \\(g1\\) and \\(g2\\) respectively. D4 changes across categories of both \\(g1\\) and \\(g2\\). 4.3.3 Visual exploration of findings All of the approaches were fitted to each data design and for each combination of the considered parameters. The formed clusters have to match the design, be well separated, and have minimal intra-cluster variation. It is possible to study these desired clustering traits visually in a more comprehensive way than just looking at index values. So we use MDS and parallel coordinate graphs to demonstrate the findings: In Figure , we tried to see how separated our clusters are. We observe that in all scenarios and for different mean differences, clusters are separated. However, the separation increases with an increase in mean differences across scenarios. This is intuitive because, as the difference between categories increases, it gets easier for the methods to correctly distinguish the designs. Figure depicts a parallel coordinate plot with the vertical bar showing total inter-cluster distances with regard to granularities \\(g1\\), \\(g2\\), and \\(g3\\) for all simulation settings and scenarios. So one line in the figure shows the inter-cluster distances for one simulation setting and scenarios vary across facets. The lines are not colored by group since the purpose is to highlight the contribution of the factors to categorization rather than class separation. The first plot shows that no variable stands out in the clustering, but the following two designs show that {g1} and {g1, g2} have very low inter cluster distances, meaning that they did not contribute to the clustering. It is worth noting that these facts correspond to our original assumptions when developing the scenarios, which incorporate distributional differences over three (a), two (b), and one (c) significant granularities. Hence, Figure (a), (b), and (c) validate the construction of scenarios (a), (b), and (c) respectively. The js-robust and wpd methods perform worse for \\(nT=300\\), then improve for higher \\(nT\\) evaluated in the study. Although, a complete year of data is the minimum requirement to capture distributional differences in winter and summer profiles, for example. Even if the data is only available for a month, \\(nT\\) with half-hourly data is expected to be at least \\(1000\\). As a result, as long as the performance is promising for higher \\(nT=300\\), this is not a challenge. In our study sample, the method js-nqt outperforms the method js-robust for smaller differences between categories. More testing, however, is required to corroborate this. For more detailed results, please refer to the supplementary paper. The code for creating these data designs and running the methodologies is available at (https://github.com/Sayani07/paper-gracsR/Validation). Figure 4.5: The parallel coordinate plot illustrates the total inter-cluster distances for granularities \\(g1\\), \\(g2\\), and \\(g3\\). One line in the figure depicts the inter-cluster distances for a single simulation scenario. While the first plot indicates that no variable stands out during clustering, the next two designs demonstrate that {g1} and {g1, g2} have extremely low inter-cluster distances, indicating that they did not contribute to clustering. It is worth emphasising that these facts are consistent with our initial assumptions when designing the scenarios and (a), (b), and (c) correspond to Scenario (a), (b) and (c) respectively. Figure 4.6: Relative positions of clusters corresponding to different scenarios (columns) for different values of mean differences between categories (rows) are shown using the first two dimensions of MDS. It can be observed that clusters become more compact and separated for higher mean differences between categories across all designs. Between designs, separation is least prominent corresponding to scenario (c) where only granularity is responsible for the clusters. "],["4.4-sec:cases.html", "4.4 Case study", " 4.4 Case study The use of our methodology is illustrated on smart meter energy usage for a sample of customers from SGSC consumer trial data which was available through Department of the Environment and Energy and Data61 CSIRO. It contains half-hourly general supply in KwH for 13,735 customers, resulting in 344,518,791 observations in total. In most cases, electricity data is expected to have multiple seasonal patterns like daily, weekly or annual. We do not learn about these repetitive behaviors from the linear view because too many measurements all squeezed in that representation. Hence we transition into looking at cyclic granularities, that can potentially provide more insight on their repetitive behavior. The raw data for these consumers is of unequal length, with varying start and finish dates. Because our proposed methods evaluate probability distributions rather than raw data, neither of these data features would pose any threat to our methodology unless they contained any structure or systematic patterns. Additionally, there were missing values in the database but further investigation revealed that there is no structure in the missingness (see Supplementary paper for raw data features and missingness). The study begins by subsetting a data set along all dimensions of interest using data filtering and prototyping. By grouping the prototypes using our methods and assessing their meaning, the study hopes to unravel some of the heterogeneities observed in energy usage data. Because our application does not employ additional customer data, we cannot explain why consumption varies, but rather try to identify how it varies. Data filtering and variable selection Choose a smaller subset of randomly selected \\(600\\) customers with no implicit missing values for 2013. Obtain \\(wpd\\) for all cyclic granularities considered for these customers. It was found that hod (hour-of-day), moy (month-of-year) and wkndwday (weekend/weekday) are coming out to be significant for most customers. We use these three granularities while clustering. Remove customers whose data for an entire category of hod, moy or wnwd is empty. For example, a customer who does not have data for an entire month is excluded because their monthly behavior cannot be analyzed. Remove customers whose energy consumption is 0 in all deciles. These are the clients whose consumption is likely to remain essentially flat and with no intriguing repeated patterns that we are interested in studying. Prototype selection Supervised learning uses a training set of known information to categorize new events through instance selection. Instance selection (Olvera-L’opez et al. (2010)) is a method of rejecting instances that are not helpful for classification. This is analogous to subsampling the population along all dimensions of interest such that the sampled data represents the primary features of the underlying distribution. Instance selection in unsupervised learning has received little attention in the literature, yet it could be a useful tool for evaluating model or method performance. There are several ways to approach prototype selection. Following Fan et al. (2021)’s idea of picking related examples (neighbors) for each instance (anchor), we can first use any dimensionality reduction techniques like MDS or PCA to project the data into a 2D space. Then pick a few “anchor” customers who are far apart in 2D space and pick a few neighbors for each. Unfortunately, this does not ensure that consumers with significant patterns across all variables are chosen. Tours can reveal variable separation that was hidden in a single variable display better than static projections. Hence we perform a linked tour with a t-SNE layout using the R package liminal (Lee (2021)) to identify customers who are more likely to have distinct patterns across the variables studied. (Refer to Supplementary article for further details). Figure shows the distribution across hod (a), moy(b) and wnwd (c) for the set of chosen \\(24\\) customers that were chosen. Few of these customers have similar distribution across moy and some are similar in their hod distribution. 4.4.1 Clustering The \\(24\\) prototypes are clustered using the methodology described in Section and results are reported below. In the following plots, the median is shown by a line, and the shaded region shows the area between the \\(25^{th}\\) and \\(75^{th}\\). All customers with the same color represent the same clustered groups. Groups by JS-based distances and wpd-based distances are colored differently as they represent different groupings. The plotting scales are not displayed since we want to emphasize comparable shapes rather than scales. The idea is that a customer in a cluster may have low total energy usage, but their behavior may be quite similar to a customer with high usage with respect to distributional pattern or significance across cyclic granularities. 4.4.1.1 JS-based distances For clustering based on JS-based distances, we chose the optimal number of clusters using (Hennig (2014)) as \\(5\\). The groupings are shown in Figure . Customers with the same color represent the same clustered groups. Our methodology is useful for grouping similar distributions over hod and moy and they are placed closely for easy comparison. Few groups have mixed patterns across hod and moy, but few have all customers in the group having a similar profile. Figure shows the summarized distributions across \\(5\\) groups and assists us in characterizing each cluster. It shows Groups \\(2\\) and \\(4\\) have hod pattern with a typical morning and evening peak, whereas groups \\(1\\), \\(3\\), and \\(5\\) show a moy pattern with higher usage in winter months. Differences in Weekend/Weekday between groups are not discernible, implying that it may not be a relevant variable in distinguishing various clusters unless maybe conditioned by moy or hod. It may be interesting to compare these two plots to verify if the summarized distributions across groups correctly characterized the groupings. If it has, then the majority of the group’s members should share a similar profile. Figure 4.7: The distribution of selected customers over hod (a), moy (b), and wnwd (c) for the \\(24\\) selected customers is shown. In each case, the same colour denotes the same group using js-based clustering and are placed together to facilitate comparison. Individuals with similar distributional differences across categories of hod or moy are grouped together, with some exceptions. Figure 4.8: The distribution of electricity demand over hod (a), moy (b), and wnwd*hod (c). Groups 2 and 5 appear to have a hod pattern among its members, whereas groups 1, 3, and 5 appear to have a moy pattern. Weekend/weekday differences across groups are not discernible, showing that it is not a critical variable for clustering on its own. It is probable that the distribution over Weekend/Weekday will differ conditional on the categories of hod or moy. (c) demonstrates that the distribution is not different, except for the tails. It is useful to compare the summarised distributions of groups to those of individuals in order to establish that the majority of individuals in the group share the same characteristics. 4.4.1.2 wpd-based distances We chose the optimal number of clusters using (Hennig (2014)) as \\(3\\). A parallel coordinate plot with the three significant cyclic granularities is used to characterize the groups here. The variables are sorted according to their separation across classes (rather than their overall variation between classes). This means that \\(moy\\) is the most important variable in distinguishing the groups followed by \\(hod\\) and \\(wnwd\\). There is only one customer who has significant \\(wpd\\) across \\(wnwd\\) and stands out from the rest of the customers. Group 3 has a higher wpd for hod than moy or wkndwday. Group 2 has the most distinct pattern across moy. Group 1 is a mixed group that has strong patterns on at least one of the three variables. The findings vary from js-based clustering, yet it is a helpful grouping. Figure 4.9: Each of the 24 customers is represented by a parallel coordinate plot (a) with three wpd-based groupings. The plot shows that moy is the most important variable in identifying clusters, whereas wkdn-wday is the least significant and has the least fluctuation. One particular customer with high wpd across wknwday stands out in this display. Group 3 has a higher wpd for hod than moy or wkndwday. Group 2 has most discernible pattern across moy. Group 1 is a mixed group with strong patterns on atleast one of the three variables. All of these could be observed from the plot or the table (b) which shows median wpd values for each group. Things become far more complicated when we consider a larger data set with more uncertainty, as they do with any clustering problem. Summarizing distributions across clusters with varied or outlying customers can result in a shape that does not represent the group. Furthermore, combining heterogeneous customers may result in similar-looking final clusters that are not effective for visually differentiating them. It is also worth noting that the Weekend/Weekday behavior in the given case does not characterize any cluster. This, however, will not be true for all of the customers in the data set. If more extensive prototype selection is used, resulting in more comprehensive prototypes in the data set, this method might be used to classify the entire data set into these prototype behaviors. However, the goal of this section was to have a few customers that have significant patterns over one or more cyclic granularities, apply our methodology to cluster them, and demonstrate that the method produces useful clusters. "],["4.5-sec:conclusion.html", "4.5 Conclusion and future work", " 4.5 Conclusion and future work We offer two approaches for calculating pairwise distances between time series based on probability distributions over multiple cyclic granularities at once. Depending on the goal of the clustering, these distance metrics, when fed into a hierarchical clustering algorithm using Ward’s linkage, yield meaningful clusters. Probability distributions provide an intuitive method to characterize noisy, patchy, long, and unequal-length time series data. Distributions over cyclic granularities help to characterize the formed clusters in terms of their repeating behavior over these cyclic granularities. Furthermore, unlike earlier efforts that group customers based on behavior across only one cyclic granularity (such as hour-of-day), our method is more comprehensive in detecting clusters with repeated patterns at all relevant granularities. There are few areas to extend this research. First, larger data sets with more uncertainty complicate matters, as is true for any clustering task. Characterizing clusters with varied or outlying customers can result in a shape that does not represent the group. Moreover, integrating heterogeneous consumers may result in visually identical end clusters, which are potentially not useful. Hence, a way of appropriately scaling it up to many customers such that anomalies are removed before clustering would be useful for bringing forth meaningful, compact and separated clusters. Secondly, we have assumed the time series to be stationary, and hence the distributions are assumed to remain constant for the observation period. In reality, however, it might change. For the smart meter example, the distribution for a customer moving to a different house or changing electrical equipment can change drastically. Our current approach can not detect these dynamic changes. Thirdly, it is possible that for a few customers, data for some categories from the list of considered significant granularities are missing. In our application, we have removed those customers and done the analysis but the metrics used should be able to incorporate those customers in the clustering by handling their missing categories. Finally, \\(wpd\\) is computationally heavy even under parallel computation. Future work can make the computations more efficient so that they are easily scalable to a large number of customers. Moreover, experiments can also be run with non-hierarchy based clustering algorithms to verify if these distances work better with other algorithms. "],["thanksgracsr.html", "Acknowledgments", " Acknowledgments The authors thank the ARC Centre of Excellence for Mathematical and Statistical Frontiers (ACEMS) for supporting this research. Sayani Gupta was partially funded by Data61 CSIRO during her PhD. The Monash eResearch Centre and eSolutions-Study Support Services supported this research in part through the resource usage of the MonARCH HPC Cluster. The Github repository, github.com/Sayani07/paper-gracsr, contains all materials required to reproduce this article and the code is also available online in the supplemental materials. This article was created with R (R Core Team 2021), knitr (knitr2015?), (Xie 2020) and rmarkdown (Xie, Allaire, and Grolemund 2018), (Allaire et al. 2020). Graphics are produced with ggplot2 (Wickham 2016) and GGally (Schloerke et al. 2021). "],["supplement-gracsr.html", "Supplementary Materials", " Supplementary Materials Data and scripts: Data sets and R code to reproduce all figures in this article (main.R). Supplementary paper: Additional tables, graphics and and R code to reproduce it (paper-supplementary.pdf, paper-supplementary.Rmd) R-package: To implement the ideas provided in this research, the open-source R package ‘gracsr’ is available on Github (https://github.com/Sayani07/gracsr). "],["5-ch-conclusion.html", "Chapter 5 Conclusion", " Chapter 5 Conclusion This thesis presents a framework for visualizing and analyzing distributions of large temporal data by leveraging time characteristics. The building blocks of this framework are presented in each main chapter. This chapter summarizes the thesis content, covering original contributions, software development, and future ideas. "],["5.1-original-contributions.html", "5.1 Original contributions", " 5.1 Original contributions Exploratory time series analysis entails numerous iterations of identifying and summarizing temporal dependencies. It is common practice to divide time into years, months, weeks, days, and so on in order to make inferences at both finer and coarser scales. In the literature, the formalization of these temporal deconstructions (granularities) is limited to linear time granularities such as hours, days, weeks, and months that respect the linear progression of time and are non-repeating. Cyclic granularities that are repeating in nature are useful for finding patterns in temporal data. They can be circular, quasi-circular, or aperiodic in nature. Hour of the day and day of the week are examples of circular granularities; the day of the month is an example of a quasi-circular granularity; and public holidays and school holidays are examples of aperiodic granularities. Additionally, time deconstructions can be based on a time hierarchy. Thus, single-order-up granularities such as second of minute or multiple-order-up granularities such as second of hour can be envisioned. The definitions and rules defined in the literature for linear granularities are insufficient for describing various types of cyclic granularities. Chapter 2 provides a formal characterization of cyclic granularities as well as tools for classifying and computing potential cyclic granularities from an ordered temporal index. It also allows for the manipulation of single- and multiple-order-up time granularities via cyclic calendar algebra. The approach is generalizable to non-temporal hierarchical granularities with an ordered index. Visualizing probability distributions conditional on one or more cyclic granularities is a powerful exploration tool. However, there may be too many cyclic granularities to look at manually for comprehensive exploration, and not all pairs of granularities can be effectively explored together. Chapter 2 also provides a recommendation on whether a pair of granularities can be meaningfully plotted or analyzed together (a “harmony”) or when they cannot (a “clash” or “near-clash”). Cyclic granularities could be used to create a wide range of displays. And, when there are numerous granularities to choose from, deciding which one to display can be difficult. Moreover, only a few of them may be useful in revealing major patterns. In Chapter 3, the search for informative granularities is facilitated by selecting “significant” granularities. A cyclic granularity is referred to as “significant” if there is a significant distributional difference of the measured variable between different categories. Chapter 3 defines a distance measure to quantify these distributional differences. A higher value of the distance measure for a cyclic granularity or harmony implies that they could be interesting for further investigation, whereas a low value indicates that nothing noteworthy is unfolding. A threshold and, consequently, a selection criterion are chosen using a permutation test such that cyclic granularities with significant values of the distance measure are selected. In addition, the distance metric has been appropriately adjusted, allowing it to be compared not only across cyclic granularities with different numbers of categories but also across a set of time series. As a result, it can also be used to rank the displays according to their ability to capture the greatest amount of variation across one or multiple time series. The ideas in Chapters 2 and 3 can be used for studying patterns in individual time series or comparing a few time series together. This is extended in Chapter 4 to allow for the exploration of distributions for multiple time series at the same time using unsupervised clustering. In the time series clustering literature, probability distributions across cyclic granularities have not been considered in determining similarity. However, such a similarity measure can be useful for characterizing the inherent temporal data structure of long, unequal-length time series in a way that is resistant to missing or noisy data while allowing for the detection of similar repeated patterns. Chapter 4 proposes two approaches for calculating distances between time series based on probability distributions across cyclic granularities. The first approach considers two time series to be similar if the distributions of each category of one or more cyclic granularities are similar. The second approach considers two time series to be similar if they have a similar significance of patterns across different granularities. A similar significance does not imply a similar pattern, which is where this technique varies from the former. When the distances from these approaches are fed into a hierarchical clustering algorithm, they yield small groups of time series with similar distributions or significance over multiple granularities. Our method is capable of producing useful clusters for both approaches, as demonstrated by testing on a range of validation data designs and a sample of residential smart meter consumers. "],["5.2-software-development.html", "5.2 Software development", " 5.2 Software development This thesis focuses on integrating research approaches into open source R packages for reproducibility and ease of use in other applications. So a significant amount of work has been devoted to the development of R packages gravitas, hakear, and gracsr, each of which corresponds to a chapter presented in this thesis. 5.2.1 gravitas The gravitas package provides very general tools to compute and manipulate cyclic granularities and generate plots displaying distributions conditional on those granularities. The functions search_gran(), create_gran(), harmony(), gran_advice() and prob_plot() provides the entire workflow for an analyst to systematically explore large quantities of temporal data across different harmonies (pairs of granularities that can be analyzed together.) This package was developed as part of my internship at Google Summer of Code, 2019. It has been on CRAN since January 2020. The website (https://sayani07.github.io/gravitas) includes full documentation and two vignettes about the package usage. There has been a total of 12K downloads from the RStudio mirror dating from 2020-11-01 to 2021-11-01. This package supplements the paper corresponding to Chapter 2, which has won the ACEMS Business Analytics Award 2021. The package can be generalized to non-temporal applications for which a hierarchical structure can be construed similar to time. 5.2.2 hakear The R package hakear (https://github.com/Sayani07/hakear) implements ideas presented in Chapter 3. The function wpd() computes the weighted pairwise distances (\\(wpd\\)) for each cyclic granularity or pair of granularities, and select_harmonies() selects the ones with significant patterns and ranks them from highest to lowest \\(wpd\\). These selected harmonies can be plotted using package gravitas for potentially interesting displays. This package is reliant on parallel processing using multiple multi-core computers for faster computation of \\(wpd\\). 5.2.3 gracsr The open-source R package gracsr is available on Github (https://github.com/Sayani07/gracsr) to implement ideas presented in Chapter 4. The package contains functions for implementing the complete clustering methodology with choices of scaling and distance metrics discussed in the chapter. It has received a grant (AUD 3000) as part of the ACEMS Business Analytics Prize towards polishing the functions and preparing it for CRAN. "],["5.3-future-ideas.html", "5.3 Future ideas", " 5.3 Future ideas Non-stationary time series Because the time series are observed over a short period of time (1-3 years), they are assumed to be stationary. But it is possible that the distributions change over time, even over a short period. For the smart meter example, the distribution for a customer moving to a different house or changing electrical equipment can change drastically. To detect these dynamic changes, non-stationarity in time series has to be incorporated while visualizing distributions and also computing distances for two non-stationary time series or one stationary and another non-stationary time series. Structured missingness It is possible that data for a whole category of cyclic granularity is unavailable or that there are insufficient observations to compute distributions. For example, a customer does not have data for a particular day of the week or month throughout their observation period. While visualizing probability distributions across categories in Chapters 2 and 3, this can be indicated by displaying dot plots instead of summarizing distributions. But the distances in Chapter 4 can not handle missing observations if they are structured like this. More research is needed to design a distance that can incorporate customers with structural missingness and also comprehend its implications while visually characterizing them. Anomalies Characterizing clusters with varied or outlying customers can result in patterns that do not represent the group. Moreover, integrating heterogeneous consumers may result in visually identical end clusters, which are potentially not useful. An appropriate anomaly detection approach could be applied to filter the anomalies, and then a decision has to be made regarding if the anomalies should form a group or be assigned to the closest group through a classification method. Develop inferential methods for the clusters It is important to determine whether or not any detected clusters are statistically significant. In Chapter 4, we have used a permutation approach to detect if patterns are authentic or not across one or a pair of granularities. A similar approach could be used for finding the significance of clusters, but permutations used for comparisons must adjust for the fact that different temporal granularities have distinct conditional distributions. Scaling up for larger uncertainty and computational efficiency Larger data sets with more uncertainty complicate matters, with potentially more problems than already stated above. More research is needed to understand what other sorts of problems may arise with the current methodology and possible ways to address them. All of this must be done while keeping computational efficiency in mind, as this is critical when scaling up for the analysis of large data sets. Scaling up the methods for multivariate time series data Another possible extension would be to create a similar framework for visualizing and analyzing multivariate time series data. With multiple time series available for each observation, the complexity of efficient exploration and visualization grows exponentially. In this case, conditional distributions include not only temporal dependency but also variables and their dependencies. This adds to the already high-dimensional data structures that result from studying distributions. This big problem can be tackled by first incorporating time’s inherent characteristics while visualizing one or a few multivariate time series data. Unsupervised clustering can then be used to group multiple time series across multiple time granularities and variables. This is a method similar to the one used in this thesis for dealing with univariate time series. "],["bibliography.html", "Bibliography", " Bibliography "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
